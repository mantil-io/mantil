// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// github/mantil-workflow.yml
// terraform/modules/dynamodb.zip
// terraform/modules/funcs.zip
// terraform/templates/main.tf
// aws/project-policy.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _githubMantilWorkflowYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\xc1\x8e\xd3\x30\x10\x86\xef\x7d\x8a\x39\x70\x03\xa7\x02\x6e\x3e\xed\xaa\xdb\x03\x42\x5c\x08\x12\x42\x08\x45\x5e\x67\x5a\x9b\x26\x1e\xe3\x19\xaf\x29\x4b\xdf\x1d\xa5\x09\xd9\x28\xbd\x25\x9e\xef\xff\xf2\x2b\xe3\x60\x7a\xd4\xf0\xc9\x04\xf1\x1d\x14\x4a\xa7\x43\x47\x65\x43\x41\xc3\xf7\x98\xd9\xbd\x99\xcf\x9a\xd6\x73\x34\x62\xdd\x8f\xcd\x4f\x7a\x64\xbd\x01\x78\xc0\xd8\xd1\x79\x78\x02\x48\x39\xb0\x1a\x62\xf9\x31\x07\xc9\xaa\x33\x82\x2c\xd7\x11\x0b\x46\x1e\x29\x00\x05\xe3\x17\x77\x0e\xed\x89\xb2\x40\xc2\x48\xec\x85\xd2\x79\x22\x00\x32\x23\x6b\x30\x56\x3c\x05\xde\xda\x89\xbc\x7b\x7a\xb7\x72\xd4\x28\x39\x82\x60\x4a\xe6\x40\xa9\x5f\xe5\x9d\x61\xe7\x2d\xa5\xb8\xe5\x81\x53\x33\x77\xf7\xf4\x76\x5d\x86\xc2\xc1\x1f\x73\x42\x30\x85\xc1\x26\x6c\x31\x88\x37\x1d\xaf\x2b\x15\x56\x73\xad\xff\x19\x35\x9c\x2e\x32\x2f\x7a\x80\xe2\xc5\xe9\xf9\x0d\x26\x81\x45\x66\x75\xc2\xb3\xf2\xad\x86\x57\xcf\xcf\xc0\x68\x13\x0a\x57\xf7\x5f\xeb\xe6\x7e\xb7\xdb\xd7\x75\xf3\x71\xff\xad\xf9\xf0\x00\x97\xcb\x2a\x3d\xa2\x0b\xc9\xad\xa1\xde\xef\x3e\xef\xbf\x2c\x44\xb7\x96\x84\x47\x3f\x2c\x0b\xb3\xb2\x18\x24\x99\x4e\xad\xff\xc9\xb8\xdc\x39\x97\x72\xd0\xf0\x77\xa1\x29\x47\x14\x50\xbf\xc0\x89\x44\xd6\xdb\x6d\x7f\xbd\x42\xaa\xa5\x12\x3a\x32\x2d\x57\xfc\xbe\x5a\xea\x2b\xd3\x9b\x3f\x14\x4c\xe1\xca\x52\x3f\xe1\x0b\x9f\x75\x3d\xb5\xf0\xfa\x37\xdc\x4c\xaa\x09\x86\xf6\x5a\xe9\x5f\x00\x00\x00\xff\xff\x63\xd3\x90\xdc\xb2\x02\x00\x00")

func githubMantilWorkflowYmlBytes() ([]byte, error) {
	return bindataRead(
		_githubMantilWorkflowYml,
		"github/mantil-workflow.yml",
	)
}

func githubMantilWorkflowYml() (*asset, error) {
	bytes, err := githubMantilWorkflowYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github/mantil-workflow.yml", size: 690, mode: os.FileMode(420), modTime: time.Unix(1626701957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _terraformModulesDynamodbZip = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xf0\x66\x66\x11\x61\x60\x60\xe0\x60\xd8\x99\xf4\x35\xe8\x9b\x3e\xbb\xf8\x19\x06\x06\x86\x47\x8c\x0c\x0c\xec\x0c\x32\x0c\xb9\x89\x99\x79\x7a\x25\x69\xa1\x21\x9c\x0c\xcc\x76\x5f\xbf\x27\x14\x7d\xff\x9e\x50\x5a\xc1\xcd\xc0\xc8\xf2\x95\x91\x81\x01\xac\xb1\x75\x82\x2f\x5f\x93\x81\x80\xdb\x77\xdb\xa3\x4b\xd8\x3f\xb0\xe9\xc5\x6c\x70\xbf\xd0\xba\x3a\xad\x81\x4d\x4a\x4b\x35\xf7\xa2\xc0\xe1\xbb\xb9\xdc\xa1\x1f\xd5\xcb\x2e\x1f\xfd\x9d\xf6\xec\xac\x47\xe8\x22\x93\x02\x65\x06\xd9\x79\x96\x6b\xee\x8b\xe9\xad\x30\x97\xb3\xb8\xb7\x78\xdb\x21\xae\xab\x1b\xa7\xf5\x4f\xbc\xbc\x6f\xe9\xfb\x9e\x9b\x1b\x9f\xcf\x7b\x2a\x27\xb9\xf4\xed\x66\xa5\x69\x33\xbf\x4d\x3d\x2b\x3a\x71\xe7\xa6\x4e\x81\xb3\xbd\x52\x25\x27\x1b\x1f\x5d\xdd\x90\x55\x22\xb6\x4a\x6b\xc6\x51\xa7\x22\xae\x92\x9f\xd7\x1f\x45\x4f\xa8\x9b\x9f\x71\x67\x41\xe6\xb3\x8b\x82\x6b\x6c\x62\x9d\x92\xc3\x3f\x0b\x74\x76\xae\x70\x91\xd1\x6d\x99\xb2\x68\xf5\x4c\x69\x99\x6f\x9e\xe5\xea\xd3\xd4\x24\x4f\x4f\xfa\x6b\x78\x92\xff\x4a\xfa\x85\x28\xdd\xae\x83\x9f\x16\x6c\x3a\xf1\x47\x8a\x7d\xc3\x9c\x67\xdc\x7c\xe6\x05\x33\x5f\xe6\x5f\x6f\x7f\xe4\x7e\xf8\xaa\xad\xf3\xfa\xce\x3b\x8c\xa0\xc0\xe0\x62\x00\x81\x82\x84\xaf\x41\x32\x62\xb3\x57\xe9\x32\x30\x30\x80\x30\x17\x83\x0c\x43\x7e\x69\x49\x41\x69\x49\x31\x2c\x3c\x3e\x7f\xc0\x1a\x1e\x10\x55\x0a\x4a\x25\x89\x49\x39\xa9\xf1\x79\x89\xb9\xa9\x4a\x0a\xd5\x5c\x0a\x0a\x65\x89\x39\xa5\xa9\x0a\xb6\x0a\x39\xf9\xc9\x89\x39\x7a\x20\x71\xae\x5a\x2e\x44\xe8\x1f\x4d\xfa\x1a\xa4\xcc\x20\xb7\xc9\x8d\x81\x81\xc1\x9f\x81\x81\x81\x87\x41\x86\xa1\x2c\xb1\x28\x13\x64\x0a\xdc\xca\x40\xec\x51\xa0\xed\xad\x73\xca\xc7\xe7\x94\x67\x68\xc0\x29\xef\x33\xbe\xa1\x41\x2b\x9e\x05\x05\x68\xac\xd4\xf1\x08\x6d\x60\x8a\x6e\x7d\x34\x69\xd1\x99\x3d\x25\x0b\x0a\xbc\xb2\x0a\x8b\x02\xd3\x1c\x3d\xd3\xea\xe4\x02\x22\x4e\xf2\xaf\x88\x53\xb4\xf7\x5d\xa8\xa2\x1c\xba\x90\x25\xa5\x45\x28\x5c\x57\x9c\x21\xc0\x9b\x91\x49\x8e\x19\x57\x5a\x90\x00\x07\x0b\x23\x03\x03\xc3\x92\x46\x10\x0b\x9e\x32\x58\x21\x29\x03\xcd\x49\x10\xc3\x70\x85\x25\xb2\x61\xbc\x8c\x0c\x28\x21\xcb\x0a\x09\x59\xac\xe6\xe1\x0a\x2a\x64\xf3\xea\x18\x19\xd0\x02\x8e\x15\x12\x70\x18\x26\xb2\xb2\x81\x74\x31\x33\x30\x33\xbc\x07\xb9\x8a\x09\xc4\x03\x04\x00\x00\xff\xff\x8d\x43\x60\x95\x0f\x03\x00\x00")

func terraformModulesDynamodbZipBytes() ([]byte, error) {
	return bindataRead(
		_terraformModulesDynamodbZip,
		"terraform/modules/dynamodb.zip",
	)
}

func terraformModulesDynamodbZip() (*asset, error) {
	bytes, err := terraformModulesDynamodbZipBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "terraform/modules/dynamodb.zip", size: 783, mode: os.FileMode(420), modTime: time.Unix(1626863652, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _terraformModulesFuncsZip = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x98\x77\x50\x14\xdb\xba\xc5\x9b\x30\x24\x19\x92\x20\x39\x09\x0a\x48\x70\xc8\x19\x05\x54\xa2\x24\x25\x48\x1c\xf2\x10\x07\x61\x18\x10\x04\x25\x67\x44\xc9\x20\x51\x46\x50\x72\x1e\x72\xce\x39\x4a\x94\x0c\x4a\x74\xc8\x0c\x02\xaf\x7c\xa7\xee\x3b\x9e\x73\xea\xde\xfb\xba\x6a\x57\x75\xff\xb1\x57\xf5\xfe\x76\xff\x76\xaf\xf5\x69\xa9\xe1\xe1\x53\x03\x00\x40\x04\x14\x19\xec\xe8\xf0\x57\x7d\xf3\xfa\x82\x0b\x00\x07\xa4\x00\x40\x00\x30\x01\xe6\x2e\x76\x02\x08\x1b\xdd\xa7\xc4\x00\x9e\xbe\xfe\x0e\xf4\xd7\x70\xf7\xbc\x06\xe0\xe0\x1f\xe1\x00\xc0\xff\xce\xdb\xd1\x33\x71\x98\x85\x50\xfb\x0c\x15\xa3\x3d\xef\xf2\x3b\xbc\x8f\x6e\x04\xf7\x72\x1b\x3d\x23\x34\x62\x4e\x89\x74\x0a\x64\xa3\x3e\x17\xc3\xd8\x1b\xa5\x73\xda\x1e\xa8\x5e\x9e\x17\xf1\xe5\xbe\x5d\x19\x07\xa3\x86\x05\x6f\x28\x2b\x20\xee\x21\x76\x25\x47\xc3\x6e\xdd\xd1\xee\xa6\x68\x59\xb9\x47\xb3\xf2\xa2\x7f\xdd\x78\x45\xd3\x54\x28\x4c\x35\x15\xf4\x46\x61\xfd\xa0\x8a\x30\x06\x43\xbd\x44\x4d\x45\xb9\xdf\x2e\x7e\xcf\x2b\xdf\x74\x0f\x94\x23\x33\xb4\xe2\x48\x46\xac\x69\x4b\x19\xb2\x75\xf3\x9a\x3b\x9f\xd0\x30\x6e\x1e\xf5\x66\xb4\xec\x74\xa5\x3e\x4d\x56\x83\x2b\x8f\x6f\x3c\xb2\xda\x81\x9d\x7e\xdf\x05\xe7\xd0\x10\x5e\xbb\x5b\xc8\xdd\xf8\xa8\x7b\x39\x74\xf9\x64\xe9\x64\x40\x3a\x9a\xfb\xde\x06\x95\xb0\x53\xd9\x52\xd6\x4b\x9e\xc0\x46\xc5\x8e\x4d\xfb\x06\xe8\xb8\x82\xfe\x04\x41\x62\xd3\xaa\x8a\x5f\x23\x71\x33\x14\x68\x2b\xc7\x80\x30\x6f\xc3\xf3\x94\x61\x9d\x5a\xca\x0f\xdd\x92\x88\x6c\x5e\x3e\x52\xb3\xe9\x20\x05\x79\xf9\x95\x38\x37\x8a\x72\xcd\x85\x14\xaa\x1e\xf3\x22\xf3\x72\x6e\x53\x89\xdd\x4a\xc7\x6a\xb7\x53\x8e\xb8\x09\x67\xf6\xfa\x9a\x4c\x57\x1b\x9d\x0c\x4c\xe2\x6d\x6e\x6a\xef\x50\xa1\x84\x36\x25\x2a\xbb\x2e\xc3\x5e\x59\x58\x88\xa6\x0e\x13\x5b\x47\xe8\x5d\x77\xcf\xb3\x7f\xa7\x48\x9f\x4f\xb6\xf4\x64\xfc\x1a\xe5\xfc\xdd\x73\x53\x2b\xf4\x06\xf4\x5e\xb7\x80\x31\x0c\x87\xc0\x00\x96\xf6\x65\x8a\x4f\xbe\x0d\x2a\x72\x1c\x19\x97\x31\xd8\x45\xdb\x22\x2d\xec\x2e\xaf\x4d\x7f\xb5\x3e\xa1\x02\x67\x1e\x52\x99\xd8\x27\xe8\xfb\x04\x17\x5a\x02\x7b\xc2\x03\x4e\x12\x59\x3b\x71\xce\x65\xa4\x9a\x2c\xda\xd8\x4e\x25\xf6\x17\x45\x3d\x13\x5b\xd6\x6a\x36\x44\x1e\xd8\xa9\xbc\x2c\x59\x3a\x4e\x4a\x25\xd0\xed\x5c\xf5\x54\x6d\x4b\x62\xae\xd7\x20\x5e\x56\x5f\x31\xd6\xb3\x8c\x21\x3b\x26\x81\x13\x9b\xf3\x54\xb2\x57\x3d\x5a\x35\xee\x50\x9a\xeb\x58\xf7\xfb\x9e\x30\x45\xdf\x80\xd2\xa8\x9b\x24\x30\x8c\xd7\x78\xdb\xb2\xa5\x3e\x90\x72\x51\x30\x19\x97\xdd\x37\x57\x63\x1e\x55\x87\x3c\xb6\x6e\x0f\xd6\x6f\xf9\x02\xbf\x5d\x1c\x83\x29\xaa\x28\xb4\x8c\xe7\xef\x00\x0b\x09\x08\x5b\x26\x9f\x4b\xb2\x9f\xf5\x0a\xd3\x9b\x13\x9e\x3d\x66\x3c\x74\x1e\xd8\x4b\xe4\x85\xf7\x9d\x62\x45\x4f\xb9\x90\xf7\xec\xb1\x9a\x29\x0b\x1a\xa8\x93\xac\xe5\xa6\x23\xd9\xca\xa3\x23\x8f\x50\x4c\xe4\xa5\x12\x94\xc5\xf6\xd5\x40\x6b\x53\xef\xc5\xb7\x30\xc1\x56\x19\x4a\x6b\x55\x81\x71\xf6\xa1\xdb\x3d\x3e\x04\x28\xdd\xfe\x9b\x1d\xfd\xb7\xe4\x82\x54\x42\x3e\x36\xea\x6e\xe7\x75\x68\x4b\xe7\xea\xf8\x60\x89\x98\x2b\x23\x37\xdc\xf6\xa9\x55\xc5\x16\xd5\x03\xc0\x8e\x86\x4f\xaf\x5d\x6e\x2e\xd6\x51\xd1\xdb\x64\x85\xfe\x80\x8e\x96\x1f\x22\x90\xe9\x61\x79\x32\x9f\xaf\xcf\x3a\x93\x43\x64\x65\x72\xf6\x68\x1a\x62\x4f\x19\xda\x84\x38\xbd\x2b\xeb\x42\xa8\x3e\xb1\xa7\xb2\xa7\x99\x70\xe2\xc6\x27\x64\x73\xd2\x19\xde\x30\x48\xe4\x1e\xd8\xe8\xde\xe4\x3a\xbb\x95\x68\xa3\x54\xf5\x6c\xfb\xd2\x3b\xe5\x79\x50\x01\xf6\x5a\x5e\xc6\x99\x89\xb5\xf1\xd5\x5c\x48\x9d\x72\x8e\xcc\xa0\x31\x37\x12\x45\xec\xaa\x94\x0f\x6e\xd3\x15\x26\x94\x69\x66\x6e\x25\x69\xf7\x6a\xac\xd3\x65\xd8\x23\xff\x13\x8b\x8a\xe7\x2b\x3a\xb8\x0d\x8d\x59\x67\x00\x00\xec\xe2\x00\x00\xe1\x2f\x2c\xdc\x11\xb0\x7f\x71\x81\x78\xba\x08\xfd\x35\xfe\xc6\x45\x50\x4c\x8b\x2a\x9e\x20\x45\xf0\xde\x8b\xf0\xe7\x0d\x21\x5e\x34\xe1\xa1\xa1\x44\xcb\xe1\x13\xb1\xca\x74\x29\xa5\x8c\xb0\x58\x77\xa1\xd9\xb2\xf0\xbd\x5d\xab\xba\x51\x14\xb5\x71\xb7\xf5\x46\xdf\xd5\x45\xb2\x9b\x01\xd7\x61\x89\x7a\x3e\x1d\x27\x0e\x72\x94\x93\xcc\xac\x9d\x42\x0e\x1a\xe1\xd8\xc7\x4a\x44\x2f\x44\xcc\xcd\x06\x7e\x9c\x15\xca\x28\xc4\x02\xca\x6a\x35\x41\x5a\x46\x6e\x09\x95\x3a\x3c\x31\xdc\x50\x25\x0c\xd7\xff\xe1\x74\x9f\xdf\x84\x3a\x89\xd5\x75\x68\x5d\x4b\xd7\x05\x44\xeb\x42\x2c\x0c\x52\x65\x52\x07\x0e\x2c\x49\x9f\x68\x30\xdf\xb5\x83\x37\x8b\xa1\x69\x48\x76\x4a\x3c\x42\x58\xb8\xf8\x42\xf6\xcc\x16\xa8\xe7\x37\xbe\x29\x57\x0a\x4d\xf9\xb3\x2a\x75\x61\xef\xb5\x26\x5c\xaf\xff\x4a\x9c\x9e\x8d\xff\x7d\x7e\xca\x60\x45\x2c\x87\xb9\xc1\x1a\xbb\x4d\x5d\x0d\xce\xe2\xaa\xfa\x62\xe9\x16\x17\x63\x51\xaa\xb2\xc0\x42\x5b\xf3\x69\x8f\x65\xcf\xcc\xfe\xa4\x16\xed\x83\xd4\x74\xbf\x28\xe1\x86\xf6\xd9\xe5\x33\x20\xbb\x05\xc9\xa1\xd3\x8d\xb2\x0d\x3f\x97\x46\xe0\xe5\x1e\x46\xd0\x0f\x7d\x3f\x41\x7f\x56\x6e\xd7\xf5\x40\xe7\xae\xbb\x4c\x55\x1e\x1e\x00\x64\x92\xfd\x71\xa0\xd8\x99\x3b\xfd\xab\x70\x4d\xce\x47\x50\x99\xd7\x47\x7f\x2f\xdc\x44\xa2\x13\x7c\x0c\x42\xd1\xb5\x70\xf2\xc4\xc0\x4f\x7f\x6c\xb4\x88\x11\x42\xe9\xa7\xf5\x9d\x20\xa5\xbd\x6d\x1c\xc7\x5b\x30\xab\xd7\xad\x28\x5f\x94\x8b\xd6\x31\x17\xa5\x7e\xb1\xfb\x3e\xb6\x42\x2d\xc5\x8a\x97\x94\x13\x86\x12\xeb\xb9\xf0\xf1\x68\x5c\x90\x7c\x2e\x42\xa7\x5e\x09\xac\x63\x6a\xe8\xd5\x58\xa2\x44\xef\xfc\x48\xca\xf5\x44\xd0\xbb\xbe\x99\x47\xd0\x45\xbc\xc0\x2f\xc0\xbe\xe8\xa9\xef\x12\x27\x01\xe9\x9b\xd8\x9a\x60\x83\xd2\xc7\x13\xcc\x92\x53\xb0\xc1\x3e\x2e\x1a\x33\xc1\x3b\x65\x1c\x91\xe8\x48\x15\xc8\x4a\x2d\xe3\x3a\x97\xda\x7e\x67\x94\x0a\x47\x77\x19\x03\x57\x5e\x8e\x41\xcc\x7a\xc7\xb5\xab\xd3\x15\xc6\xb2\xda\x6d\xba\x83\xc6\xd7\x62\x54\x96\x77\xa1\x5f\x2f\x4d\x5f\x2d\xec\xed\x9d\x5d\x28\xc2\xc5\xc5\xd3\x9f\x39\xb3\xfb\x4f\xbd\x3b\xcb\x8e\xe5\x42\x8c\x3d\x43\xad\x83\x03\xf9\x83\x19\x1c\xfc\xe5\x6f\x38\xaf\xda\x97\x78\xe7\x4b\x4e\x08\xdd\x10\x5a\x0a\xb7\xaa\x56\x4c\x83\x0f\x0b\xf3\x34\x47\x0d\xda\x8e\xae\x51\x5e\xf9\x09\xd2\x94\xf3\x42\xf6\x27\x67\xac\x7b\x66\x31\x56\xb8\xad\xd6\x2b\xe0\xb8\xd6\x33\xd5\x8a\xfe\xcb\x26\xe4\x3e\x87\x78\x93\x75\xee\x07\x87\x97\x56\x8e\x7c\x6f\x40\xba\x8a\x2b\x0f\xc4\xca\x6b\x03\xa2\x79\x39\xa7\xfb\x2a\xea\x1e\x6e\x6a\xcc\x30\x95\x3f\xbd\x70\x47\x0b\xaa\xab\xa3\x64\x0d\xfd\xb1\x1a\xd5\x24\xfd\x86\x0a\x7d\x31\xd4\x4e\x9e\x7b\x38\x73\xfe\xe8\xf0\x1a\xd4\x61\x5d\xaa\xbf\xb6\xa0\x07\xd7\xf4\xa7\xd4\x2f\x03\xae\xa5\xe6\x3d\x05\x99\xe8\x52\x1d\x89\x3b\x36\xe6\xdc\x1f\xa0\x79\x9c\xd6\xa2\x0a\x15\x78\xec\xcd\x49\x29\x5d\xd2\x5d\x0d\x5d\x71\x1f\x0f\xd5\x14\x07\x2b\x2b\x16\x9d\x22\x4f\x0d\x53\xbb\x28\x56\xb4\x6e\x3c\x99\xe6\xd3\xb9\xed\x19\x85\x9e\xde\xa6\x91\x96\x27\x1d\xbc\x9f\xc3\x20\x67\xc7\x92\x8a\xef\xae\xa7\x9b\x3f\x66\x88\x38\x79\x86\x9c\x19\xd2\xef\x3a\x41\xfa\x5a\xd2\xa6\x04\x14\xa6\xc4\x58\x19\x1d\x65\xba\xdc\xf2\x08\x9f\x0b\x11\xb1\x25\xcc\x35\x36\x3e\xe0\x85\x16\x1b\x64\x80\x1c\xdf\xc8\x5a\xc8\x90\xd2\x77\xda\xb7\xac\x06\x06\xc5\x70\x1b\xa3\xbf\x5a\xaa\xb0\xc7\x05\x8f\x0c\xf4\x31\x95\xf4\x3d\x35\x0e\xb8\x50\x92\x3a\xdf\x9d\x14\x25\x6c\x19\xbc\x70\x7a\x62\xc2\xfc\x2a\x92\x9d\xa8\x61\x3e\x2d\x10\xd1\xa4\x84\xf1\x94\xc0\x32\x47\x52\xc7\xf4\x84\x6a\x30\xd0\xcb\xc5\x59\xac\xa9\xb8\xd2\x36\x89\x21\x59\xd6\x68\xeb\xd7\xf5\xd4\x17\xfc\x65\x9f\xbf\x70\x86\x0e\xe1\x5b\x49\xb7\xbe\x28\x88\x09\xc9\xa8\xf4\x0a\xc0\x32\x9b\xbd\x16\x18\xcb\x7f\xed\x1c\x60\xfc\xa8\x5e\x6a\x96\xca\x0d\xcd\x16\x49\x67\xea\x0c\x7a\xc1\xef\x3b\x2c\xbc\x22\x6f\xe4\x8f\xbc\x31\xc0\x39\x79\x9d\xaf\x38\x4b\x47\x3b\x55\x6d\xe6\xb4\xfe\x55\xfb\xfe\x74\x8d\x74\x37\x1f\x25\x1f\x01\x11\xf8\x62\x46\x72\xd3\xa1\x16\x26\xaf\x89\x06\x46\xa3\xa0\xb8\x0c\x30\x0e\x8a\x92\x4f\x95\x61\xc4\x5e\xb2\x33\x74\xa1\x0e\xef\xdf\x06\x96\x21\xcf\xdf\x7c\xad\xa6\x8e\x54\x9b\x3a\x4c\x3f\x3c\x0f\x09\x19\xca\x90\xdd\xd1\xe6\x89\xd0\x99\xe5\x39\xad\x08\x4b\xea\xa1\x50\x60\x6d\x1c\x9b\x9f\x53\xf1\xd1\xb7\xbc\xf7\x00\xe2\x1b\x39\x99\xb1\x4f\xff\xe9\xbe\xd2\x28\xda\x8b\x61\x21\x5b\xb3\x3f\x8e\xd5\x9f\xd2\xd0\xd4\xb9\xae\xd3\x8e\xc4\x68\xc9\xa3\xf6\x2a\x54\x26\xf4\x62\x91\xbb\x18\xff\x65\x37\x4f\x5a\x01\x9b\x6e\xc6\x71\x32\x22\xcf\x6f\x19\x4e\xb2\x55\xcb\xa1\x55\x92\x26\x40\xee\xa3\xe3\x48\xc2\xa8\x40\xc6\xe7\xde\x51\xb1\xbe\xe9\xe7\x63\x98\xdb\x48\x20\x40\xfd\x71\x69\x6e\x3e\x7e\x13\x4e\xee\x34\xae\x66\xc9\x64\x68\x3f\x30\x1a\x9a\x5e\x97\x50\x6d\xb4\x4c\x87\x76\xe0\x0a\x38\xc9\x27\x4b\xca\xb4\x91\x99\x35\x11\x8c\x70\xfc\x26\x93\x56\x2c\xbb\xf6\xae\x75\xcc\xec\x85\x53\x5e\x45\x40\x2b\xef\x93\xfb\xbe\x21\xfa\x70\xd1\x8f\x2a\xf1\xca\xba\x2e\x36\xdf\xb9\xed\xb5\xde\x7f\x4c\xe8\xef\x12\x26\x81\xef\x2a\x75\xb8\x33\xa1\xc1\xcf\xc4\x10\x5d\x3e\x0d\xf7\x8e\x6b\xb5\x0d\xfb\x2d\xd3\x2b\x75\xf4\x62\x8f\x6a\x91\x82\x6e\x83\x1d\xef\x06\xd4\xe6\xb1\xbe\xa5\x16\x42\x1f\x73\xd4\x6a\x7f\x5a\x9c\x54\x91\xd7\x5a\xe5\x46\xfa\xe2\xfe\xd5\x38\xb8\x15\xb6\x77\x75\x83\x00\xe0\x39\xd9\x1f\x27\xa4\x93\xb9\x9d\xf3\xef\xce\xc1\xe0\x9f\xce\x21\x5e\xdf\x09\x3e\x2b\x46\x71\x59\x64\xf6\x3c\xd6\xa8\x5d\x80\x49\xd2\xa9\x04\x79\x2d\x86\xe6\x59\xea\x0d\x1c\xa9\x0a\xd8\xf9\xa7\x2d\xb6\x61\x2a\x7e\xb7\x8f\xca\x7e\x39\xef\xd1\x7e\x57\xe7\xbb\xca\xaa\x09\xb5\x56\x6a\xa0\xa9\x92\xee\xba\x8d\xaf\x66\x7c\xee\x2d\x39\x41\xb3\xf8\xf7\x4b\x53\x14\x4f\xde\x2b\x62\xbf\x4d\xfe\x78\x54\xe6\xaf\x59\xdd\x6f\x85\x2a\x4a\xd6\x72\x53\x2e\xa7\x6e\x8a\x1e\x9b\xbe\x3c\x1d\xe1\x37\x29\x79\xb4\xaa\x66\xf3\xe2\x2b\xa4\xfa\x6b\x2e\x11\xe7\x76\xee\x18\x79\xc1\x54\x49\xf8\x75\x0a\xca\xe9\xb1\x97\xd3\x37\x18\x77\x17\x73\xdd\xb4\x0a\xe3\xd2\xb7\xf7\x27\xba\xa2\x05\x62\x30\xad\xab\x05\x7c\xe0\xea\x2a\xae\x07\xbd\xc4\x06\xab\x7c\x67\xe1\x95\xa3\xcf\xa0\x9f\x03\x09\xdc\x2d\x83\xdb\x3e\xeb\x06\x5d\x37\xc4\x71\x1b\x0c\xb5\xde\x42\x3f\x0c\xde\x1d\xbf\xb9\xcb\x5f\x50\xe1\x37\xc0\xa4\xc7\x16\x97\xe8\x8a\x96\x0d\x00\xbf\xbf\x4a\x88\x69\xa9\x56\x81\x30\x89\xce\xff\x60\xfe\x2a\x51\x9e\x5a\x54\xf6\x43\x8a\x0b\xee\x78\x3c\x2d\x3e\x92\x53\xae\xcc\x6d\x3f\xee\xfd\x60\x36\x83\xed\x85\xe6\x24\x71\x5f\x83\xf7\x10\x91\xf2\xbb\x21\x61\x2f\x2e\x56\xe7\x63\x9e\xb9\x73\xbe\x1b\x56\xdf\x55\xe7\x48\xd5\xf7\xef\x7f\x69\x2d\x64\x6f\xe7\x24\x11\x2a\x74\x6d\x8d\x20\x3a\xe5\x38\x69\x3c\x6c\xdc\x16\x8d\xaa\xc8\xb3\x45\x65\xd8\x88\x7f\x8f\xc4\x7f\x71\x25\x35\x8d\x47\x7c\x2d\x3e\x7a\xd1\xe1\xb0\x66\x75\x5d\x7e\xf1\x2d\x32\x1d\xf1\x88\xce\x14\x93\x6a\x87\x3d\xda\xda\xe2\x4a\x92\x3e\x81\x41\x02\xdc\xfa\x25\x51\x6a\x97\xd5\x8f\x29\x85\x68\x3e\xaf\x8a\x33\x1b\xa8\xa6\x73\x58\x8e\x85\x4a\xd5\x2d\xd8\x92\xbf\x92\xfa\x80\xda\x02\xe7\x18\xb3\xdf\xea\xc6\x7e\x78\x4b\xa2\x74\x59\x34\xea\xf2\xc0\x8b\xe9\xa1\xac\xbd\xa9\x43\x79\x5f\xe1\x69\xa7\x37\x21\xe9\xe0\xfa\x8f\xc3\xe9\xbb\x57\xf9\x5b\xf7\xdf\x34\x5f\x6b\x67\xbc\x15\x93\x8a\xd8\xf2\x3a\x3c\x95\x0b\xd9\xe0\x22\xf7\x68\xbd\xaf\xb0\xfa\xe6\x9b\xb1\x13\x65\xcd\xfa\x47\x12\x6b\x53\x95\x06\x2b\xa1\xae\x15\x01\x9d\xcb\x8d\x1d\xdf\x63\xd6\x56\x8a\x79\x8e\xfb\x8b\xc7\xa0\x19\xda\x8f\x9a\x74\x77\x09\x31\xa0\x58\x35\xb3\xac\x43\xad\xb6\x6f\x03\xd9\x89\x92\x8e\xbe\x12\x45\x78\x7d\x32\x2c\x9d\x60\x5e\x88\x2a\x0c\x8c\xb2\xae\x45\x16\x95\xda\x46\x3c\x84\x19\x64\xd9\x1f\x47\xd4\xcd\xd0\xb2\x44\x4f\xb4\x2c\xe7\x30\x38\x26\xea\x50\x13\xa6\x12\x79\xa8\x7e\x7f\x1d\xed\x08\x11\x33\xec\x31\xd1\xff\x71\x9d\x82\xb7\x59\xc1\xd0\x21\x40\x5e\x24\x87\xc2\xbd\xf8\xad\xe6\x0f\x75\x3b\x52\x31\x61\x46\x53\xdc\xf2\xb4\xd7\x93\xae\xdc\x08\x54\xe0\x98\x62\xa8\x9d\xb9\x84\x9b\x72\x18\x98\xf4\x68\x60\xee\xf3\xf5\x47\x0f\x60\x59\xe2\x81\xbe\x3a\x60\xed\xa3\x82\x92\x4f\xac\x54\x42\x99\x43\x6d\xdf\x1d\x11\xf3\xc1\x22\xb3\x5c\x87\xd3\x5c\x3d\xf8\x72\x4d\xaf\x2e\x58\x84\x15\xe0\x92\xed\x09\x3b\xa8\xd8\x19\xbd\x2f\x3f\xbd\x06\xc0\x4a\x65\x0e\x64\xe1\x1f\x54\xf3\xbe\xa7\x38\x9d\x65\xde\xeb\x98\xdc\xae\x8c\x22\x52\x8b\x1e\x5c\x6e\x86\x7b\x8e\x48\x65\xdd\x71\x71\x40\xc8\x17\xf6\xe9\x51\x25\xac\x7e\x56\x58\x3b\xba\x33\xba\x51\xba\xc1\x7e\xfc\xee\x7a\xa4\x91\x1b\x44\xdd\x3c\xf8\xb1\xe6\x22\x9d\x86\x59\x7f\xcc\xb5\xdc\x40\xe7\xc7\x2d\xec\xd6\x5f\xc4\xf6\xb8\xd4\x49\xec\x8a\xd5\xc2\x9d\x7c\x14\x04\xe9\x57\xb0\x4b\x36\xb3\x28\x77\x1b\x91\x59\x8d\x75\x17\x2c\x13\xa1\xd1\x66\x32\x4b\xff\x41\xa4\xa7\x57\xf2\xdb\x54\x1a\xd7\x18\x54\xf7\x3c\x5d\x69\x07\x5b\xb0\x51\xd7\x1d\xe9\xfa\x86\xa0\x2f\x2c\x77\x07\x5b\x80\x68\x4a\x76\x43\x1e\xbd\xfa\x29\x9a\x77\x1b\x04\xf3\x34\xfc\xd9\xbd\xd6\x6a\x61\xa6\x72\xe4\xda\xa4\x21\xaa\xf9\xd9\xa2\xc1\xbc\x89\xf0\x9a\x52\x11\x0f\x26\xa9\x41\x12\xd6\xa6\x68\x9a\x4c\xab\xba\xb7\x3f\x69\x2f\xa2\xdc\x67\x86\xe9\x78\x39\xcb\x45\xe4\xc6\xaa\xf7\x04\x4c\x4d\x4c\x7c\xd5\x39\x1e\x0e\x87\x35\x0a\x1a\x75\xb2\xc7\x14\x98\x26\xf0\xed\xc9\x60\x7c\xd8\x5e\x33\xc0\x06\x9f\xf9\xd9\x31\x74\x29\xbf\xd2\x7c\xf2\x15\xa6\xe2\x0d\xb0\x13\xeb\x6d\x1c\xa6\x80\xba\x23\xe9\x69\x8e\x01\xbe\x42\xaa\x44\xaa\x86\xfc\x91\x07\x7c\xa7\x90\xd7\x90\xc4\x61\xa3\x63\x91\x60\x3e\xcc\x13\x99\x8f\x5f\x3d\xce\x95\x46\x35\x3d\xe1\x1e\xe2\x03\x64\xd7\xfa\xd4\xd8\xc0\xe5\xfc\xb1\xfc\x43\x58\xeb\xc5\x92\xb0\xb9\x7c\x9c\x5d\x01\x73\x2e\xe5\xda\xf9\x4c\x51\x0b\x3e\x6b\x11\xe1\x11\x7a\x51\xb7\xb1\x43\x0c\x12\xe3\x19\xe1\x86\xa9\xbb\xb0\x95\x1b\xff\xb0\xc0\x67\x93\x26\x30\x1c\x36\x38\x5f\xb4\x74\xd2\xa3\x5c\x1c\x2a\xc8\x4c\x07\x31\x55\x1a\x0c\x51\x78\xa4\xdf\xe3\x59\xd1\x92\x84\xf0\x14\x65\x5f\xb8\xc2\x78\xbb\x26\x3d\x35\xd1\x01\xd3\x05\xeb\xa7\xb7\xec\x2b\xe4\x53\x79\x03\x75\x7e\x66\x9a\x1a\x50\xec\xa1\x6d\x5e\x50\x76\xe3\x64\xd4\xb2\x34\x34\x58\x3f\x76\xb5\xe4\x60\x4e\x5e\xaa\x3e\xa5\xf9\xed\x82\x10\x0c\x76\xaf\x62\xff\x27\x8c\xfa\x11\x2f\xeb\x46\x09\x33\x16\x27\xf8\xa1\x6d\x57\x76\x0c\x84\x98\x1f\x81\x9b\xf5\xaa\xb5\x8a\x67\x58\xb5\x8b\x77\x45\x3a\xb7\xa9\xb5\x9c\x29\xca\x34\xac\xb7\xed\xac\x11\x3f\xd1\xe0\xa3\xc4\xee\x2c\xaa\xd5\xb8\xd2\x61\xbe\xf7\x9d\x17\x8b\x4a\xd6\xb1\xed\xcb\x1a\x08\x28\x11\x2e\x67\xde\xf4\x20\x75\x18\x78\x5f\x51\xb4\x15\x9e\xd0\xea\x59\x6a\xad\x50\x86\x8a\x69\xdd\x59\x8c\xd0\x93\xd9\xc2\x98\xd1\x3b\xed\x60\x3a\x12\x9b\x23\xeb\x84\xab\xcc\x19\x64\xc1\xe2\x95\x2e\x12\x4f\xa4\x46\x33\x15\x04\x54\xa5\x5d\x06\x33\x44\x56\x02\x59\xa5\xc7\x2d\x64\x55\xde\xdf\x4e\x7a\x72\xf3\xfa\x9a\x19\xb3\x34\x12\x19\xb0\x7c\xd0\xfb\xad\x0a\x03\xe9\xde\xad\x79\x24\x6e\xf2\x50\x69\x50\xc2\x2d\x29\x0e\xcb\x20\x20\x67\xdc\x62\xe4\xf8\xf6\x8b\xa3\x52\xd5\xb5\xca\x09\x46\xb2\x3d\x19\xc5\x0c\xb4\xc7\x09\x13\x3c\xba\x32\x6b\x6b\x58\xb9\x18\x57\x83\xe5\xfe\xe5\x84\xef\x2e\x4c\x7f\xc5\xe6\x10\xcf\xdd\x82\xb9\x37\x9b\x4f\x3e\xdf\x27\xb7\x89\xcd\x61\x38\x09\xd6\xa7\xab\xc5\x9e\x95\xbc\x38\xfb\xc3\xfc\x36\x3e\xcd\x20\x6e\x47\x6a\x11\x5c\xe7\x39\x63\x16\xc9\x08\x64\x5a\x3b\xfb\xf1\x48\x4e\xe4\xc4\x76\xaa\x1e\x4c\x5e\xef\x9b\xd4\xd1\xe5\x55\x64\x72\x8c\x40\x3a\x5f\x7a\xce\x30\x6c\x25\x08\xba\x7e\xe6\x49\x0b\xba\x48\x36\xa4\x37\xb1\x64\xd8\x29\xc9\x7b\x9e\xcf\xed\x77\x09\x59\x32\xda\x50\x23\x57\x78\xc5\x63\xa1\x07\xe6\xc0\x60\xf6\xc7\x6c\xa5\x32\x1f\x10\x8f\x4b\x56\xad\x40\xc8\x7b\xa2\x14\xe1\x1c\xe9\x1f\xf0\x66\x3e\x97\x49\xec\x8c\x68\x2b\x37\x9d\xcc\x98\x57\x5c\xe1\xfc\xd5\x2a\xbf\x1c\x08\xa3\x42\x00\x00\x90\x0c\x00\x00\x09\xc0\x04\xc0\xdd\x11\x2e\xee\x08\xb7\xff\xe2\x96\x1f\x46\xc9\x93\xb5\xb1\x91\xe2\xef\xd5\xb7\xde\x94\x8c\xa5\x3d\xe4\x4f\x88\xaf\xa5\xfc\x8c\xc7\x4d\x97\x4d\x84\x39\x79\xa7\x38\xbb\x55\x80\xb4\xf1\x37\x10\xa1\x01\x19\x91\x95\x0e\xf7\xe3\x03\xf1\x39\x10\x99\xe6\xc1\xa8\xc1\xc8\x38\x19\xe7\x9c\x97\xa3\x41\x9a\x1a\x54\xc5\x69\x01\xb5\x7e\x69\xe4\xa2\x8d\xf4\x5d\xd5\x77\xdd\xf2\x11\x73\xd4\xe5\xa3\x9d\x74\xb0\x8d\xc6\x29\xf3\xed\xce\x97\xbc\xc5\x54\x7a\x47\x82\xab\x75\x47\x77\x55\x8c\x55\xe6\xe0\x22\xf3\x2f\x81\xbf\xfe\xc0\x2e\xfa\xdf\xdd\x47\xe1\x00\x40\x2f\x3e\x00\x90\x02\x4c\x00\xd2\xdc\xd5\xce\xdc\xc2\xd1\xda\xed\xbf\xe4\xdf\xf8\xb8\x16\x8d\x36\x08\x69\xf0\x9e\x37\x49\x7e\x6e\x4b\x56\x62\xd8\x0a\x19\x8c\x6d\xf7\x07\x10\x9f\x8a\x36\x79\xc0\xa0\xaf\x22\x45\x17\xea\xd1\xd5\xd3\xf9\x74\x86\xa4\x22\x7d\x33\xe7\xf2\x6a\x28\x7a\x0c\xcf\x2b\xa0\xf2\x16\x77\x4a\xcb\x27\xd8\x54\x10\xae\x9c\x3e\x90\xc2\xc0\xe4\x18\x78\xe8\xb8\x74\xc0\x7b\x17\xb4\xf6\x38\x43\xee\x1d\x6a\xd9\x8f\x61\x45\x3d\x1a\x8d\x13\x61\x52\x48\x29\x70\xe7\x56\x3d\x85\x7c\x48\x67\xbc\x36\xf2\x59\x16\x78\xb8\x84\x30\x72\x24\xd5\x2b\x94\xba\xd7\xe2\xa8\xd2\x90\x59\x00\xbf\x70\x8d\xc1\xe9\xe1\xae\x8b\x42\x68\x57\x7a\x7b\x5e\x9b\x6f\xd4\xae\xa7\xb0\xff\xcc\xba\x0f\x85\xac\x06\xa7\x28\x56\x61\x19\xd4\x99\xcb\x47\x7c\xd3\x4e\xa6\x2e\xda\x38\x90\xb5\x49\x38\xaa\x92\x63\x9d\x38\x06\x99\x85\x85\x2a\x71\xbc\x3f\x28\x0f\x62\xd3\x45\x23\x77\x4f\xfb\x75\x66\xe6\x1f\xe5\x31\x57\xe5\xb0\xaf\xb5\xcd\xa6\xcb\xc8\x5b\x69\xa5\x43\xa8\xa0\xf0\xcc\xf8\x44\x71\x19\x7f\xae\x0e\xd3\xb6\x94\xaf\xa5\x5b\xfc\xf1\xe1\x75\xa9\x3c\x84\xb9\x72\xa6\x8a\x98\x18\xe1\x66\x73\xa5\x5c\x21\xa5\x60\x07\xe2\x5e\xc8\xf8\x1a\x6b\x74\xf8\xcb\x82\x61\xb3\xb5\x9a\x58\xa6\x31\xba\x78\x12\xf5\xf4\xe7\x9a\x11\xa6\x6c\xde\xd5\x57\x38\xca\xa6\x34\xd9\x88\x12\x55\xd1\x9f\x01\x82\xe9\xe3\x37\xab\xed\x35\x3c\xee\x6d\xde\xbf\x31\x38\x90\x9c\xee\x59\x56\x28\xa8\x35\x61\x39\x77\x85\x34\x71\xa1\x9e\x56\xf1\x9d\x7a\x7a\x94\x69\xca\x63\x2a\xbf\x4d\xe0\xb0\x51\x7f\x97\x51\x82\x27\x2d\x64\x43\x28\xe7\x35\x95\xdd\x26\x3f\xab\x8a\xe6\x99\xca\x19\x49\xe5\x31\x75\x6b\xb1\x74\xc5\xeb\x46\xc7\x73\xb4\x77\x70\x79\x73\xff\x14\x62\xb4\x2a\xf6\x55\xed\xd0\x73\xe7\x37\x6d\x15\x0e\xaf\x32\x26\x5a\x25\x77\xd0\xf1\x19\x24\x6d\x14\xdd\x8a\x43\x8e\x89\x21\x12\x92\xa5\xe2\xac\x49\xfb\x42\x9d\xe2\x5a\x6a\x38\xb8\x2c\x78\xff\xae\xcd\x41\x07\xfc\xba\x70\x00\x00\xc8\xf1\xfb\x75\xf7\xaf\xa6\x07\xe8\x8f\x4d\xff\xdb\x86\xff\xae\xf5\xcf\x6c\xf8\xbb\x16\x2d\x1e\xf0\x67\x52\x04\xfd\xf1\xed\xff\x07\xb1\x7f\xc6\xa5\xdf\xc5\xb4\xf1\x81\xff\x0b\x4f\xa0\x3f\xc2\xd3\x7f\xd0\xfa\xa7\x25\xfb\x5d\x4b\x92\x08\xf8\xd3\xa0\xfd\xff\x56\xf9\x57\xac\x7f\x17\x53\x20\x03\xfe\x02\xf9\x7f\x5f\xe8\x3f\x71\xfb\x5d\x0f\x4b\x06\xfc\x0d\xbe\x7f\xf7\x86\x20\x82\x5f\xb3\x08\x00\x02\x60\x1c\x07\x00\xd6\x28\x7e\x3d\xfd\x4f\x00\x00\x00\xff\xff\x4c\x40\xa0\x46\xcf\x12\x00\x00")

func terraformModulesFuncsZipBytes() ([]byte, error) {
	return bindataRead(
		_terraformModulesFuncsZip,
		"terraform/modules/funcs.zip",
	)
}

func terraformModulesFuncsZip() (*asset, error) {
	bytes, err := terraformModulesFuncsZipBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "terraform/modules/funcs.zip", size: 4815, mode: os.FileMode(420), modTime: time.Unix(1626863652, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _terraformTemplatesMainTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x8f\xa4\x36\x10\xbd\xf3\x2b\x4a\xec\x1c\x36\x51\x86\xde\x68\x14\x69\x35\xd2\x1c\x36\xd9\x44\x91\x92\xec\xac\x76\x26\x97\x5c\x90\x31\x45\xe3\x8c\xb1\x91\x3f\x7a\xb6\x1b\xf1\xdf\x23\x7f\x60\xa0\xe9\x8e\xb4\x5c\xc0\xae\xaa\x57\xcf\xaf\xca\x05\x97\x94\x70\x0d\x43\x06\x40\x5e\x75\xa9\x70\xcf\xa4\x80\xf0\x3c\x40\x8e\xf6\x96\xa2\x30\x8a\xf0\xdb\x1f\x73\xb8\xfa\xbc\x81\xe7\xc7\x8f\x8f\x10\xa3\x5f\x5b\x54\x08\x0a\xb5\xb4\x8a\xa2\x86\x57\xc6\x39\x54\x08\x54\x21\x31\x58\xc3\x5b\xfc\x4a\xb1\x37\x40\xb9\xb4\x75\xa3\xa4\x30\x50\x33\x6d\x14\xab\xac\x09\xf1\x8c\xb6\xc0\x34\xec\xb9\xac\x08\xff\x2e\x72\xeb\x95\x6c\x18\xc7\xc4\x6d\x18\x8a\x47\xb5\x27\x82\x9d\x88\x0b\x2b\x3e\x91\x0e\xc7\x71\xc3\x32\x72\x9b\xa2\x1b\xa9\xc0\x6a\x04\x26\xc0\x9f\xdd\x41\x03\xe5\x2c\x03\xa8\x85\x2e\x4f\x52\x60\x0a\xbd\x90\xe4\xe3\xa7\xa7\x7f\xa4\xd8\xe4\x99\x04\x90\xd6\xe0\x4f\x77\xd0\x11\x41\xf6\x58\x83\x47\x0b\x72\xd4\x42\x83\x42\x2a\x55\xbd\x11\xc4\xa5\x96\x1d\x61\x62\x01\xf8\xcd\xa9\x49\xcf\xc0\x2a\x9e\x01\xf4\xc4\xb4\x2b\x8f\x80\x15\xe5\xc9\x00\x28\x2a\x53\x12\x25\xfe\x2f\xd9\x2f\xa8\xcc\x07\x25\xae\x24\xd3\x9a\x7b\x14\xd6\x30\x4a\x4c\x10\xd5\xb4\x08\xdf\x17\xf1\x20\x6f\xa7\x5a\x33\x01\xa4\x3e\x10\x41\xd1\x95\xb1\x57\xf2\x5f\xa4\xa6\xac\x2c\x7d\x41\x93\x32\xff\xec\x97\x17\x6a\xb7\xcd\x1c\x23\x5d\xc2\x08\x06\x54\x8a\x86\xed\xad\xf2\xc4\x77\xda\x10\x83\xbb\xc6\x0a\xea\x96\xfa\x1a\x13\x43\x2a\x8e\xa5\x20\x1d\xae\x34\x78\x76\xdb\x0b\xa9\x66\x9c\x07\x7f\x47\x00\x86\xe1\x16\x14\x11\x7b\x84\xe2\xb7\xc9\x38\x8e\xd1\x14\x23\x93\x33\x80\xbe\x2b\x5f\xf0\x18\xd1\x9f\xee\xfe\xc0\x63\x00\x76\x8f\xb2\xc2\xb0\x0e\xa3\xf1\x4b\x58\xcd\xe6\xde\x56\x9c\x51\x87\x35\x14\x9f\xfd\x77\xcc\x03\xd0\x61\x27\xd5\xb1\xd4\xec\x84\xc1\xfe\x97\xdf\x78\x62\x27\x4c\x3e\x0e\x4c\x5a\x13\xec\xcf\x61\x91\x8c\xbe\x47\x42\xde\xcf\xc4\xb4\x73\x52\xab\x78\xdc\xff\xfb\xcb\x9f\xf3\x76\x4b\x44\xcd\x51\x45\xd3\xef\x61\x35\x9b\x51\x1c\x16\x67\x5e\x8a\x74\xf3\x82\xc7\x1f\xe0\xe6\x40\xb8\x45\xb8\x7f\x80\xe2\x57\x71\x48\x2c\x9c\xa3\x73\xf0\x8a\xe5\xc3\x10\xdc\x66\xd8\x00\x84\xa2\x4e\x11\xe1\x3d\x66\xe7\xb6\x31\x1b\xb3\xcc\xa0\x52\xa4\x91\xaa\xf3\x4c\x2a\x42\x5f\x50\xd4\x90\xeb\xbb\x3c\x52\x8b\xcd\x73\xd6\x74\xde\xe4\x8a\x14\xba\x20\xa1\x84\x56\x2a\x4c\xe3\xdf\xc1\x2d\x4e\xb8\xf3\xc9\x38\x31\xe8\x95\x3c\xb0\x1a\x15\xe4\xe4\x55\x87\xac\xab\x89\xba\xba\x94\x7e\xfc\x14\xf3\xd4\x75\x63\x00\x1b\x62\xb9\x29\x0d\xd9\xeb\xc8\xd9\x7f\xce\xda\x12\x4a\x51\xeb\xdb\xa9\xf7\xc3\x51\x3e\xf8\xcd\x67\xb2\x9f\x4e\x93\x24\xe9\x64\x6d\x39\x42\xee\xfa\x38\x12\x0a\x53\x79\x71\xf5\x5b\x63\xfa\xfb\xdd\xce\xd3\x69\xa5\x36\xf7\xef\xdf\xbd\x7f\xb7\x9b\x65\x08\x18\xda\xdf\x29\x5d\x9c\x58\x9f\x6f\x66\xe5\x74\x98\x69\x77\x33\xd1\x92\x83\xdf\x75\x03\xbd\x67\x65\x45\x34\x96\xb1\x13\x83\xd9\x2d\x36\x03\x6a\x32\x4e\xbb\xab\x6b\xb9\x74\x48\xbb\x99\xbf\x77\x69\xc8\xcc\x1e\xeb\xf9\x93\x41\xfc\xc3\x94\xcb\xfe\x8d\xc4\x37\x8c\x57\x7a\xd6\x47\x41\x3a\x59\x57\x67\x92\x7e\x83\x9a\x13\xc2\x24\x68\x1a\x45\x53\xe2\x79\x42\xb9\xc4\x6f\x00\xbf\xf6\x52\xa3\xff\x5d\xc5\x9e\x22\xa2\xbe\xf4\x5b\xd3\x2d\x72\x0e\x9a\x2a\xd6\x1b\x9d\x49\x6b\x7a\x6b\x7c\x43\xc6\x3e\x0b\x9c\xc3\x8d\xbc\xd0\x85\x63\xb6\x8a\x89\x09\xae\x05\x45\xf3\x2a\xaa\x67\xa5\x55\x7c\x1d\xe1\x75\xd1\xf7\xbb\xdd\xcd\xb0\xd4\x75\x4c\x6b\x57\xfa\x31\x5f\xe2\xa4\x72\xae\x91\x82\x80\x45\xe8\xc6\xb9\xe4\xe3\x36\x2e\x96\xf9\x12\xf5\xb3\x46\x98\x83\xa7\xb2\x94\x5e\xfe\x8b\x99\x53\xe5\x56\x15\xfa\x2f\x00\x00\xff\xff\x57\x03\x8b\x42\x49\x09\x00\x00")

func terraformTemplatesMainTfBytes() ([]byte, error) {
	return bindataRead(
		_terraformTemplatesMainTf,
		"terraform/templates/main.tf",
	)
}

func terraformTemplatesMainTf() (*asset, error) {
	bytes, err := terraformTemplatesMainTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "terraform/templates/main.tf", size: 2377, mode: os.FileMode(420), modTime: time.Unix(1626863491, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _awsProjectPolicyJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x31\x4f\xc3\x30\x10\x85\xf7\xfc\x0a\xcb\x63\x55\xa7\x4d\x3b\x20\xdd\x16\x50\x37\x04\x12\x54\x2c\x88\xe1\x70\xaf\x91\x21\x71\xc0\x76\x54\x09\xcb\xff\x1d\xc5\x75\xaa\x52\x22\x54\x89\x66\xba\xdc\x7b\x77\xf7\xf9\xf9\x8c\x31\xc6\xf8\x13\x19\xab\x5a\xcd\x81\xf1\xc5\xbc\x58\x88\x62\x2e\x8a\x2b\x3e\xdd\x8b\x8f\x0e\x1d\x35\xa4\x1d\x07\xf6\x1c\x5b\xfd\xe7\x0f\x55\x34\xad\xb6\x5b\x92\xbd\x83\x97\x75\xdd\xee\xd2\xec\x41\x2e\xa5\x4b\xfb\x27\xa7\xd2\x03\xd9\xb6\x33\x92\x46\xc5\x9b\x56\x6f\x54\x1a\xfd\x79\x31\xa1\x19\xa5\xab\xd5\x67\x87\xb5\x1d\x75\x44\x17\xee\x2c\x0c\x57\xd6\x58\xcd\x50\x4a\xb2\x56\x7c\x98\xf6\x2d\x31\x7b\x9f\x97\xb1\xb9\xc6\x2a\x04\xfe\x6b\x4d\xc8\xc6\xff\xc2\xf4\xdf\x79\xd4\xd8\xbc\x6e\x10\xfe\x8c\x05\x8d\x86\xfe\x11\x83\x17\x26\xe0\x7d\x7e\x6f\x2a\xd4\xea\x0b\xfb\x4d\xf9\x1d\x36\x14\x82\x68\x50\x3b\x55\x0b\x47\xd8\x08\xef\x87\xee\x84\x5f\x92\xd8\x2e\xe1\x56\x59\x77\xdd\xc9\x77\x72\xe7\x60\xdb\x25\x40\x0f\xbc\x9f\x38\xce\xf7\x32\x34\x67\x65\x77\x0a\x31\x3b\x0e\x25\x56\x2f\x59\xc8\xbe\x03\x00\x00\xff\xff\x3a\x8f\xae\x3d\x10\x03\x00\x00")

func awsProjectPolicyJsonBytes() ([]byte, error) {
	return bindataRead(
		_awsProjectPolicyJson,
		"aws/project-policy.json",
	)
}

func awsProjectPolicyJson() (*asset, error) {
	bytes, err := awsProjectPolicyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aws/project-policy.json", size: 784, mode: os.FileMode(420), modTime: time.Unix(1626863489, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github/mantil-workflow.yml":     githubMantilWorkflowYml,
	"terraform/modules/dynamodb.zip": terraformModulesDynamodbZip,
	"terraform/modules/funcs.zip":    terraformModulesFuncsZip,
	"terraform/templates/main.tf":    terraformTemplatesMainTf,
	"aws/project-policy.json":        awsProjectPolicyJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aws": &bintree{nil, map[string]*bintree{
		"project-policy.json": &bintree{awsProjectPolicyJson, map[string]*bintree{}},
	}},
	"github": &bintree{nil, map[string]*bintree{
		"mantil-workflow.yml": &bintree{githubMantilWorkflowYml, map[string]*bintree{}},
	}},
	"terraform": &bintree{nil, map[string]*bintree{
		"modules": &bintree{nil, map[string]*bintree{
			"dynamodb.zip": &bintree{terraformModulesDynamodbZip, map[string]*bintree{}},
			"funcs.zip":    &bintree{terraformModulesFuncsZip, map[string]*bintree{}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"main.tf": &bintree{terraformTemplatesMainTf, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
