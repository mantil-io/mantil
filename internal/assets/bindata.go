// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// github/mantil-workflow.yml
// terraform/modules/dynamodb.zip
// terraform/modules/funcs.zip
// terraform/templates/main.tf
// aws/project-policy.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _githubMantilWorkflowYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\xc1\x8e\xd3\x30\x10\x86\xef\x7d\x8a\x39\x70\x03\xa7\x02\x6e\x3e\xed\xaa\xdb\x03\x42\x5c\x08\x12\x42\x08\x45\x5e\x67\x5a\x9b\x26\x1e\xe3\x19\xaf\x29\x4b\xdf\x1d\xa5\x09\xd9\x28\xbd\x25\x9e\xef\xff\xf2\x2b\xe3\x60\x7a\xd4\xf0\xc9\x04\xf1\x1d\x14\x4a\xa7\x43\x47\x65\x43\x41\xc3\xf7\x98\xd9\xbd\x99\xcf\x9a\xd6\x73\x34\x62\xdd\x8f\xcd\x4f\x7a\x64\xbd\x01\x78\xc0\xd8\xd1\x79\x78\x02\x48\x39\xb0\x1a\x62\xf9\x31\x07\xc9\xaa\x33\x82\x2c\xd7\x11\x0b\x46\x1e\x29\x00\x05\xe3\x17\x77\x0e\xed\x89\xb2\x40\xc2\x48\xec\x85\xd2\x79\x22\x00\x32\x23\x6b\x30\x56\x3c\x05\xde\xda\x89\xbc\x7b\x7a\xb7\x72\xd4\x28\x39\x82\x60\x4a\xe6\x40\xa9\x5f\xe5\x9d\x61\xe7\x2d\xa5\xb8\xe5\x81\x53\x33\x77\xf7\xf4\x76\x5d\x86\xc2\xc1\x1f\x73\x42\x30\x85\xc1\x26\x6c\x31\x88\x37\x1d\xaf\x2b\x15\x56\x73\xad\xff\x19\x35\x9c\x2e\x32\x2f\x7a\x80\xe2\xc5\xe9\xf9\x0d\x26\x81\x45\x66\x75\xc2\xb3\xf2\xad\x86\x57\xcf\xcf\xc0\x68\x13\x0a\x57\xf7\x5f\xeb\xe6\x7e\xb7\xdb\xd7\x75\xf3\x71\xff\xad\xf9\xf0\x00\x97\xcb\x2a\x3d\xa2\x0b\xc9\xad\xa1\xde\xef\x3e\xef\xbf\x2c\x44\xb7\x96\x84\x47\x3f\x2c\x0b\xb3\xb2\x18\x24\x99\x4e\xad\xff\xc9\xb8\xdc\x39\x97\x72\xd0\xf0\x77\xa1\x29\x47\x14\x50\xbf\xc0\x89\x44\xd6\xdb\x6d\x7f\xbd\x42\xaa\xa5\x12\x3a\x32\x2d\x57\xfc\xbe\x5a\xea\x2b\xd3\x9b\x3f\x14\x4c\xe1\xca\x52\x3f\xe1\x0b\x9f\x75\x3d\xb5\xf0\xfa\x37\xdc\x4c\xaa\x09\x86\xf6\x5a\xe9\x5f\x00\x00\x00\xff\xff\x63\xd3\x90\xdc\xb2\x02\x00\x00")

func githubMantilWorkflowYmlBytes() ([]byte, error) {
	return bindataRead(
		_githubMantilWorkflowYml,
		"github/mantil-workflow.yml",
	)
}

func githubMantilWorkflowYml() (*asset, error) {
	bytes, err := githubMantilWorkflowYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github/mantil-workflow.yml", size: 690, mode: os.FileMode(420), modTime: time.Unix(1626701957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _terraformModulesDynamodbZip = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xf0\x66\x66\x11\x61\x60\x60\xe0\x60\xd8\x99\xf4\x35\xe8\x9b\x3e\xbb\xf8\x19\x06\x06\x86\x47\x8c\x0c\x0c\xec\x0c\x32\x0c\xb9\x89\x99\x79\x7a\x25\x69\xa1\x21\x9c\x0c\xcc\x76\x5f\xbf\x27\x14\x7d\xff\x9e\x50\x5a\xc1\xcd\xc0\xc8\xf2\x95\x91\x81\x01\xac\xb1\x75\x82\x2f\x5f\x93\x81\x80\xdb\x77\xdb\xa3\x4b\xd8\x3f\xb0\xe9\xc5\x6c\x70\xbf\xd0\xba\x3a\xad\x81\x4d\x4a\x4b\x35\xf7\xa2\xc0\xe1\xbb\xb9\xdc\xa1\x1f\xd5\xcb\x2e\x1f\xfd\x9d\xf6\xec\xac\x47\xe8\x22\x93\x02\x65\x06\xd9\x79\x96\x6b\xee\x8b\xe9\xad\x30\x97\xb3\xb8\xb7\x78\xdb\x21\xae\xab\x1b\xa7\xf5\x4f\xbc\xbc\x6f\xe9\xfb\x9e\x9b\x1b\x9f\xcf\x7b\x2a\x27\xb9\xf4\xed\x66\xa5\x69\x33\xbf\x4d\x3d\x2b\x3a\x71\xe7\xa6\x4e\x81\xb3\xbd\x52\x25\x27\x1b\x1f\x5d\xdd\x90\x55\x22\xb6\x4a\x6b\xc6\x51\xa7\x22\xae\x92\x9f\xd7\x1f\x45\x4f\xa8\x9b\x9f\x71\x67\x41\xe6\xb3\x8b\x82\x6b\x6c\x62\x9d\x92\xc3\x3f\x0b\x74\x76\xae\x70\x91\xd1\x6d\x99\xb2\x68\xf5\x4c\x69\x99\x6f\x9e\xe5\xea\xd3\xd4\x24\x4f\x4f\xfa\x6b\x78\x92\xff\x4a\xfa\x85\x28\xdd\xae\x83\x9f\x16\x6c\x3a\xf1\x47\x8a\x7d\xc3\x9c\x67\xdc\x7c\xe6\x05\x33\x5f\xe6\x5f\x6f\x7f\xe4\x7e\xf8\xaa\xad\xf3\xfa\xce\x3b\x8c\xa0\xc0\xe0\x62\x00\x81\x82\x84\xaf\x41\x32\x62\xb3\x57\xe9\x32\x30\x30\x80\x30\x17\x83\x0c\x43\x7e\x69\x49\x41\x69\x49\x31\x2c\x3c\x3e\x7f\xc0\x1a\x1e\x10\x55\x0a\x4a\x25\x89\x49\x39\xa9\xf1\x79\x89\xb9\xa9\x4a\x0a\xd5\x5c\x0a\x0a\x65\x89\x39\xa5\xa9\x0a\xb6\x0a\x39\xf9\xc9\x89\x39\x7a\x20\x71\xae\x5a\x2e\x44\xe8\x1f\x4d\xfa\x1a\xa4\xcc\x20\xb7\xc9\x8d\x81\x81\xc1\x9f\x81\x81\x81\x87\x41\x86\xa1\x2c\xb1\x28\x13\x64\x0a\xdc\xca\x40\xec\x51\xa0\xed\xad\x73\xca\xc7\xe7\x94\x67\x68\xc0\x29\xef\x33\xbe\xa1\x41\x2b\x9e\x05\x05\x68\xac\xd4\xf1\x08\x6d\x60\x8a\x6e\x7d\x34\x69\xd1\x99\x3d\x25\x0b\x0a\xbc\xb2\x0a\x8b\x02\xd3\x1c\x3d\xd3\xea\xe4\x02\x22\x4e\xf2\xaf\x88\x53\xb4\xf7\x5d\xa8\xa2\x1c\xba\x90\x25\xa5\x45\x28\x5c\x57\x9c\x21\xc0\x9b\x91\x49\x8e\x19\x57\x5a\x90\x00\x07\x0b\x23\x03\x03\xc3\x92\x46\x10\x0b\x9e\x32\x58\x21\x29\x03\xcd\x49\x10\xc3\x70\x85\x25\xb2\x61\xbc\x8c\x0c\x28\x21\xcb\x0a\x09\x59\xac\xe6\xe1\x0a\x2a\x64\xf3\xea\x18\x19\xd0\x02\x8e\x15\x12\x70\x18\x26\xb2\xb2\x81\x74\x31\x33\x30\x33\xbc\x07\xb9\x8a\x09\xc4\x03\x04\x00\x00\xff\xff\x8d\x43\x60\x95\x0f\x03\x00\x00")

func terraformModulesDynamodbZipBytes() ([]byte, error) {
	return bindataRead(
		_terraformModulesDynamodbZip,
		"terraform/modules/dynamodb.zip",
	)
}

func terraformModulesDynamodbZip() (*asset, error) {
	bytes, err := terraformModulesDynamodbZipBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "terraform/modules/dynamodb.zip", size: 783, mode: os.FileMode(420), modTime: time.Unix(1626956542, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _terraformModulesFuncsZip = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x98\x77\x54\x13\xdb\xfe\xf6\x07\x48\xa8\x06\x08\x04\x05\x21\xd2\x9b\x14\x21\x14\x45\x02\x28\x48\x0b\x52\xa5\x86\x92\x04\x04\x91\x2e\x09\xa1\x1f\x45\xa4\x23\x22\x48\x11\xe9\x45\xc0\x50\x44\x44\xa5\x4b\x47\xaa\x20\x55\x8a\x04\x90\x2a\x55\x3a\x08\xef\xf2\x75\x9d\x7b\xbc\xe7\xdc\xdf\xbd\xb3\xd6\x5e\x6b\xe6\x8f\xfd\xac\xd9\xdf\x99\xcf\xde\xcf\xf3\x35\xd0\xa1\x02\xc1\x00\x00\xa0\x05\x4a\xcc\x57\x8c\x24\xde\x2c\xf8\x0d\x53\x02\xc0\xf7\x53\x00\x40\x0d\x70\x01\x38\x8f\xdb\x92\x04\x07\x13\x63\x3a\x80\xca\xcc\x6c\x05\xfb\x73\x78\xf9\x30\x00\x14\xa0\x6d\x0a\x00\xf8\xff\xf3\x56\x4c\xad\x9d\xc7\xa4\x60\x81\xbd\xa5\xef\x7c\x2e\x48\x38\xa7\xc6\xd4\x41\x3a\x44\x2c\x2d\x68\x2c\xe1\x29\xd1\xae\x0f\x78\x60\x87\xf2\x1b\x4e\x96\xe9\x02\xb7\xbe\xa3\x8e\x0f\x4b\xc4\xf3\x1f\xcf\x0c\x40\xf2\x3e\x4a\x9f\xd6\x52\x25\xa8\x10\x56\x15\xfa\x23\x04\xcf\x1b\xb6\x33\x37\xcc\xa8\xb0\xcd\xf8\x76\xcd\x59\xcd\xe8\xdb\x20\x22\x50\xcf\xc0\x8f\x54\xe7\xbe\xbf\xa1\x89\xdd\x80\x91\x61\x2c\xd0\xcd\xe6\x8b\x2a\x7e\x24\x9b\x35\x70\x2e\xb2\x77\xc6\x85\x91\x4e\xff\x16\x34\x6c\x99\x8f\xc1\x4b\x1c\xf1\x91\xb2\x00\xb6\x14\xa3\x34\x5a\x61\xc6\x96\x55\xeb\x29\xfa\x47\x02\xf1\xad\x33\x2f\xc7\xa6\x07\xc5\x16\xda\xbd\x6a\xb5\x58\xa4\x4e\xa3\x7d\x3a\x7c\x7a\x97\xbc\xdb\xad\x18\x23\xa2\x32\xcf\x22\xe3\xfa\x8a\x9c\x15\x20\xfa\xa0\x4e\xad\x65\xc9\xa9\x16\x3b\xa0\x6a\x36\x48\x9d\x54\x3f\xab\x1d\x54\x47\xf7\x1e\x0b\x34\x95\x6f\x80\x37\x1e\x47\x16\x68\x39\xb6\x1a\x68\xa9\xe3\x93\x69\x1d\x02\x34\x74\x1c\x5a\x4e\x81\xfd\x82\x5e\xba\xd5\xc9\x09\x8f\x87\x15\xa3\x76\xc4\x88\x05\xb9\x42\x2c\xf2\x82\xe9\x07\x86\xcd\xd0\x3e\xbc\x4c\x66\xc7\x1f\xd6\xa3\x6f\x2d\x77\xbb\x87\xa8\x96\x96\x0c\x57\x58\xf2\x10\x4b\x97\x2a\xda\x8e\x23\xee\xda\xda\xca\x3d\xfb\x48\x67\x1f\x65\xca\xea\x55\xe0\x14\xa7\xc6\x41\x62\x24\xdf\x18\x60\x80\x4e\x5c\x38\xb4\xb9\xf9\x6e\x1e\xab\xd2\x2e\x69\xe5\x48\x41\x6d\xee\x98\x36\x3c\x22\x7e\xb5\x09\x2b\xbb\x13\xfd\x24\xa3\xa7\xed\x4c\x83\xa2\x8c\xd7\x55\x43\x8e\x93\xb9\x41\x6d\x77\x78\xaf\xf6\xe0\x26\x75\x67\xa1\x3b\x82\x0c\xf1\x71\x0f\xde\x4d\xe2\x6e\xa5\x38\x44\x5e\xae\xb7\x6d\xe2\xd9\xbb\xb4\x39\x25\xe7\x93\xd4\xf0\xb5\x72\x5e\xf6\xda\x6d\xed\x80\x97\xe4\x9d\xe4\x67\xd4\x26\xad\xb3\x3e\xa8\xa6\x64\x78\x8d\x1e\xdd\xf4\xf5\x19\x2b\x53\xbb\x58\xc6\x1d\x7a\x77\x3a\x9c\x68\x05\xef\x1b\x8d\x59\xab\x16\xcd\xf1\x96\xb9\xa0\xc5\xc4\x11\x8e\xda\x3c\xbd\xea\x21\x6a\x74\x82\xde\xe3\x86\xe5\xeb\xdd\x29\x3f\x8a\x86\x9e\x64\x77\x8e\x57\xe2\x1e\x56\x13\x77\xec\x9b\x43\xcd\x1a\x86\xdd\x85\x4a\x63\x37\x4a\x5e\x17\xdb\x25\x48\xb4\x40\x10\x92\x32\x76\x4f\x0f\x15\x78\xf7\x3b\x64\x38\x70\x34\xfb\xba\x9c\x5b\x6e\xdd\x6b\x49\x62\xee\x9d\x7b\x07\x72\x7b\xc2\x44\x15\xa7\x03\xfd\x94\x2f\x7a\x79\xbb\x59\xd3\xf5\xdb\x4a\x15\xdb\xdb\xde\xe1\x1b\xd1\xc7\x9a\xd8\x73\xb7\xee\x76\x37\xd6\x77\xfc\x58\x88\x90\x6e\x44\x42\xed\x51\x92\x03\xbc\xbd\x42\x1f\x02\xa9\xf3\x4c\xba\xf8\x5a\xba\x04\x95\x43\xb4\xc3\x9e\xd7\x99\x7c\x2b\x68\x31\x54\xcc\x37\x0a\x3c\xa0\x85\x57\x44\xcf\xe3\x37\x61\x28\xf9\xa9\xeb\xc1\x10\x17\xb4\x31\xc3\xf1\xd2\x54\x35\x0b\x87\x43\x56\xf8\x3a\xb6\xbf\x7c\x8b\x40\x4c\x8f\x28\x40\xbe\x60\x1d\x73\x63\x92\x52\x42\xe6\xae\xb1\xd5\xc6\xef\x9d\x6d\x42\x08\xf8\x57\x54\x87\xb1\x14\xf2\x3e\xe3\x4d\xb3\x16\xa0\x4c\x48\xcc\x16\x60\x47\x9f\x36\x4f\x12\xe9\x9e\x6f\x5f\x12\xde\x17\x4c\x72\xd0\x7c\x63\xf1\xed\xd8\x3f\xe5\x4e\x48\xd1\x01\x43\x41\xc6\xbe\xb5\xbd\xd5\xc9\x78\x58\xb5\x56\x2e\xb2\xc7\x4a\x84\x98\x47\xe7\xa9\x49\x82\x34\x99\xc8\xd0\x20\xdf\xc3\x1b\xe9\x9b\xfd\xea\xaa\x4d\xce\xae\x31\xfd\x85\xc5\xeb\x3b\x33\x46\x94\xb5\x75\x59\xfb\x00\x00\xac\x52\x00\x00\xcd\x4f\x2c\xbc\x08\x8e\x7f\x72\x41\x30\x9e\xc2\xfe\x1c\x7f\xe3\x22\x24\xb6\x01\x45\x25\xcd\x1c\xba\xe6\x1b\x79\xa7\x36\xcc\x8f\x2d\x32\x3c\x9c\x76\x3a\x72\x30\x5e\x8b\x3d\xa5\x8c\xd3\x31\xde\x0b\x31\xf6\x2a\x72\x6d\xf5\x66\x75\x7f\x1e\xcc\xaa\xdd\x7e\xbe\xf3\xe4\xc7\x53\xbc\xb9\xf0\xd6\xcb\xeb\x24\x76\x01\x0a\x62\xbf\x00\x23\xa6\x99\x59\x19\x1b\xe5\xd2\xc9\x4d\xcb\x81\xa0\x13\xe1\x81\xe8\x66\x85\x73\x22\xce\x81\xb3\x1a\xad\x89\x76\xd1\xcb\x88\x32\xe7\x1b\xe8\x79\x14\x4d\xa4\xd9\xba\xeb\x15\x09\x6b\x58\x32\xb7\x67\xef\x9c\x81\x89\x07\xf8\x8c\x07\x9d\x0c\x18\xc5\x75\x1d\xf8\x6e\x77\xea\x86\x1e\xfc\xc2\x6d\xf7\xf7\xf2\xef\xd8\xe8\x57\x5e\x7a\x87\x9d\x13\x16\x0f\x5b\xc3\x7c\x81\x4d\xcc\x2f\x68\x55\x20\x46\xee\x73\x6b\xb6\x1d\xa8\x34\x26\xb2\xd6\x4c\xd2\xa5\x67\x83\x16\x27\x46\xcc\x67\xe4\x73\xe1\xb5\xf6\x07\xdf\x60\x6f\x21\x59\xc2\x6f\x86\xed\xf0\x4f\x62\x6d\xcb\xb4\xbf\x9c\x3b\x53\x59\xb8\x76\x6e\x0d\xe3\xb4\x5b\xf5\x2e\x90\xa8\xef\xf5\xe3\xa5\x08\xb6\xf3\x36\xe9\x2c\xb1\x5d\x9a\x09\x3b\x5a\xa7\x54\x7b\x44\xee\x73\x2f\xf7\xb6\xc4\xe6\x74\x1e\x81\xff\xaa\x5c\x96\xc7\x8e\xd1\x69\xb7\x5b\x45\x38\x2a\x00\xd8\x81\xfc\xda\x50\x6e\xe3\x5c\xff\x2c\xdc\x8a\xcd\x3e\xf6\x9d\xed\xfe\xdf\x0b\x37\x68\x6a\xed\xfe\x59\x0a\x16\x38\x6f\x66\x3e\x9a\x7e\x9e\x32\x6f\xc2\x54\x62\xe9\x9c\xc8\x6b\x36\xa3\x31\x13\x82\x25\xf7\x0b\xfa\xca\x1e\x70\x91\x90\x74\x39\x9c\x5d\xed\x68\xd7\x7a\x9e\x44\xc7\xfb\x5e\x63\xd7\x20\x96\xe7\x83\xd2\xee\x72\xea\xf2\x08\xcb\x13\x5a\x41\x2a\xdb\xbe\xa7\x67\x3d\x96\x98\x72\xd7\xdf\xf3\x25\x6a\xfe\x10\x4e\x42\xdf\x34\xe4\x17\xc8\x54\x8e\x9d\x9e\x67\x28\x9b\xbc\x80\x6c\x28\x18\x96\x1a\xca\x4b\x9b\x82\x16\x2f\x6a\x25\x7c\x64\xf0\xb4\xbb\x6f\x5c\x39\xa8\x6d\xb6\xf7\x84\x86\x36\xd9\x68\xd4\x63\xe6\x99\xa0\x46\x0e\x2a\x44\xf9\x9a\x09\x44\xa8\x71\xc6\x25\x26\xf9\xd3\x8d\xc3\xa3\x65\x30\x5a\xd7\xeb\x81\xb9\xca\x95\xf3\x92\x94\x9d\xbc\x43\x7d\xb8\xe5\x76\x37\xf8\xe7\x62\x56\xd2\x39\xce\x35\xd9\xc1\x29\xb5\xcc\xbe\x23\x83\x28\x06\xf4\x40\x7f\x7f\x91\xfc\xa7\x08\x52\x7f\xc7\x6d\xcd\xc5\x83\xd0\xe0\x03\x86\x39\xd3\xcd\x7b\x1b\x74\xdb\xcc\x3b\xd3\x4e\xb6\xc1\xa9\x9e\xd4\xad\x8a\xab\xb9\x57\x03\x0f\x2c\x41\x5a\x0e\xc1\x74\x5f\x3a\x5e\x76\x5a\xbd\xfe\x4e\x66\x4e\x2e\x6c\x75\xf2\x4f\x4f\xce\xcb\xb4\xdf\x3a\x31\x8f\x2a\xbd\x7e\xb7\x13\xad\x9b\xb8\x45\x0e\xea\x97\xc5\xb6\x87\xc2\xd4\xea\x6c\x48\x90\x25\x76\xbe\xbe\x74\xb3\xea\xc7\x4f\xdc\x32\x97\xf1\x73\x23\xbd\xfd\x10\x6c\x01\xfd\x8c\xe1\xe3\x01\xf9\x77\xb2\xd2\x85\x5a\xdd\xd6\xd7\x8c\x3f\x54\xab\x4f\xd1\x47\x44\x21\xcc\x0c\x30\x18\xf0\x56\xfc\x24\x64\x36\xd3\xa5\x27\xf4\x2b\xae\x85\xc5\xa2\x21\x07\x85\x77\x30\x36\xc4\x87\xb0\x29\xc0\x1f\xd9\x99\x04\xf2\x12\x9e\x49\x1b\xbc\x80\xdd\xc9\xf9\x52\x41\x5b\x96\x57\xef\x59\x99\x64\x15\x5c\x31\xbd\x61\xbe\x94\xc3\x4f\x99\x24\x5c\x5c\x14\x07\xa3\xe8\x79\x60\x0e\xdf\xb9\x0f\x57\x27\xac\xde\x0b\x61\xa9\xd3\x3e\x5b\x10\x11\x0b\x25\xa1\x43\xf3\xbe\xcd\x95\x17\x99\x7c\xc9\x1f\xb6\x14\xbe\xbb\x02\x7b\x31\x93\x16\xca\x8c\x73\x77\xa0\xbe\xc8\xf4\xf4\x32\x91\xf1\x0d\x83\x55\xea\x8c\x99\x1d\x67\xf2\xb8\x6b\x37\xff\x2a\xf7\xfe\x64\xd2\x46\xe3\xa1\x2f\xeb\xb0\x09\xd2\xd2\xbc\x06\xaf\x21\xc7\x89\xb9\xbf\xba\x4f\x00\x89\xb1\xa8\x03\xaf\xbd\x5a\xc4\xd7\x41\x5e\xf5\x3a\x6b\xaa\xed\x62\x97\x69\x9e\xde\xaa\xe2\x41\x25\xf0\xf8\x2a\xf4\x57\xc3\x05\xef\xcc\x6b\x55\x7a\x64\x10\x59\x04\xa8\xd6\x2a\xe8\x77\x3e\x3b\x92\x2a\xcc\x4b\xaf\x0d\x61\xff\x98\xc4\xe7\x96\xe4\x13\x56\x24\x0f\x62\x9a\x27\xa0\x48\xe3\xeb\xc2\xd1\x20\xa0\xa4\x11\xa3\xc4\xba\xc9\xc1\xed\x14\xab\xd6\x01\xdc\x09\x64\xbf\x0f\x1a\xb7\x81\x23\x86\xfc\xb2\x53\x1d\x58\xdf\x5a\xee\x88\x3f\xa7\x6d\x78\xd1\x5d\x32\x79\xc4\x71\x1f\x01\x26\xcd\x85\x99\x2e\xcf\xce\x7e\xcf\x7f\xa4\x9b\x8b\xc8\x42\x3f\x6a\x68\x2d\xf6\xed\xb0\xf6\x70\xdd\x0b\x59\xd3\xa2\xaa\x80\xb4\xbd\x11\xbb\x32\x1a\xf4\x71\x27\x59\x0f\x0a\xee\x9f\xef\x58\x2f\x74\x91\x70\x19\xe8\x2a\xb7\x36\xb8\xbe\x99\x6f\x3d\xcc\xff\xe6\x65\xfc\x11\xf5\x6e\xe8\x13\x1a\xe2\x2c\xc1\x4e\x68\x4a\xc8\xb4\x30\x29\xd2\x78\x5c\x8d\xdf\x51\x93\x72\x0e\x03\x4e\xbc\x63\xbd\x8e\xbd\x68\x95\x5a\x95\xc4\x55\x31\x94\xeb\xe2\x9c\x1a\x79\x47\x74\x20\x1d\x8f\x36\x55\x62\x4d\xf5\xe5\x23\xdc\x9a\x2b\x36\x56\x8e\x37\x2b\x4c\xff\x2e\xdd\x3f\xed\x38\x87\x4c\x99\xb3\x40\xba\xb1\xe6\x04\xf9\x0e\x39\x63\xf2\x59\xa5\x60\x71\x1f\x17\xba\x54\x5f\xf3\xc0\x59\x17\x95\xa3\x60\x6a\x71\x5a\x27\x5f\xa5\x6c\xd8\x69\xf4\xa3\x8d\xf9\x36\x13\xd8\xad\x51\x50\xbd\xc8\x48\x18\x85\xf7\xd9\xd2\x23\xb9\xf0\x31\x83\x9c\xfd\x80\xc8\xc5\x41\x62\x61\xc1\x29\x2e\x7c\x57\x84\x15\x53\xd7\xb0\x5f\x85\x5a\x80\x9b\x34\x93\xa3\x2c\x0a\x2a\x3c\x5a\x25\xaf\x60\x97\x16\x2f\xc8\x79\xc3\xda\xd7\x49\x5f\x8e\x03\xdb\xa7\x60\x75\xf4\x72\x03\x41\x03\x79\x6d\xa7\x7e\x17\xf8\x0b\x50\xde\x3b\x3b\x46\x20\x4e\x84\x6c\x14\x18\x00\xf8\x19\x7f\x6d\x6d\xae\xb8\xdb\x6e\x7f\x12\x3a\x81\xf9\x8f\x84\x26\x98\xb9\xba\x8f\xc9\x33\x1f\x97\x60\xee\xc4\x33\x34\x4b\x72\x29\xb8\xbe\x24\x32\xc4\x42\x46\x53\x4e\x53\x5c\x26\x38\x1e\x16\x2e\xf3\x18\xb0\x48\xe0\x9f\x6b\x05\xe7\xa6\xbe\x0b\x3a\x39\x5c\xd5\x42\x25\xa6\xe4\xea\x42\x04\xc2\x3f\x54\xcf\x4f\x66\xd8\xe5\x4a\x3e\x7d\xed\xf1\x0c\x10\x19\xf2\xb8\x14\xb6\xf5\xa1\x98\xcc\xf9\x01\xa5\x3c\x81\x88\x37\xa9\xc2\xa9\x76\xf3\x76\x1b\x1d\x79\xa5\xf6\xec\xb4\xe9\xbb\x2d\xde\x77\xbd\x66\x23\xd5\xf9\x1d\x82\x27\x05\xa6\xf0\x34\x82\xc4\xbd\x0d\x36\x04\x9d\xf3\xca\xdf\x1b\x83\x39\x9b\x6d\x43\x9b\x5e\x99\xe4\xb1\xa2\x29\xf0\x3d\xe1\xd9\x5e\xe3\xd9\xaa\xde\x4e\x7d\xab\x12\xe2\x15\x41\xdb\x5c\x89\x3c\xb0\xd8\x90\xa6\x15\x8e\x22\xf2\xd1\x45\x63\x60\x4d\x34\xf0\xdb\xed\xba\x39\xc5\x9a\x3b\x0e\x17\xad\x1d\xc8\x62\x7e\xc9\x3d\xd9\xf7\x1c\xcd\xbb\x35\x11\x3f\x3e\x18\x14\xc9\xc4\x1d\xae\xf7\x8a\x04\x68\x2b\x7c\x58\x50\x6c\xa9\x9a\xcc\x5f\xff\x78\xab\x2c\x13\x48\x9a\x76\x60\x8e\x68\xab\x3c\xed\x06\xe6\xf5\xea\x8b\xb9\x9d\xc0\x3a\xd9\xf8\x1e\xba\x47\xf7\x3d\xad\x71\x2d\x13\x2d\xea\xaf\x92\x23\xe2\x67\xb1\x7c\x6b\x54\xf7\x32\xbf\xa2\x32\x49\x6f\xe7\x52\xa3\x6a\x31\xff\x0e\xbd\x8c\x44\xa5\xef\x29\x22\x2c\x4d\xd8\x9a\x36\x74\xf8\xc8\x21\xe5\x8f\xe3\xa3\x25\xd1\xd3\x7b\x14\x34\x0e\x1e\x31\x58\x94\xd9\x91\x8a\x4e\x6c\xa1\x01\x5b\xfd\xe2\x7b\x23\x14\x67\x48\x8a\xc6\xc0\x68\x30\xdd\x61\x90\xfe\x99\x72\x42\x60\xc0\x00\xcf\x2c\x08\x7c\x57\xd6\x93\xdc\xfe\x65\xf0\x6c\x4c\xfb\xa3\x9c\x05\xcd\x26\x4e\x57\x62\x25\x1b\xc6\x27\xe3\x5e\xc3\x28\x57\xba\xd2\xc9\xd7\xea\x3a\xc6\x23\xda\xaa\x2b\x55\x7d\x94\x79\xda\x6f\x4b\x34\x1f\x7d\x99\x5f\x9f\x9e\xdd\xd0\x66\x37\x0f\x3f\x80\xa6\x91\x24\xf8\x2e\x8e\x0f\xe0\x4e\x3b\x17\x32\x08\xe1\x91\xab\xe7\xbf\x9e\xd4\x4c\xf4\xd6\xe1\x4e\xf5\x29\x51\x82\x5c\x55\x12\x7e\xc8\x1e\x98\xee\x12\x99\x31\x52\x16\x7b\x65\xb9\x4c\xba\x5e\xdc\xa7\x03\x9f\x36\x1d\x84\x2d\x5f\x0e\xef\x9a\xc1\x4d\xbc\x94\xc9\x09\x19\x32\xb0\x7c\x2e\x36\x2f\xbf\xe3\x52\x46\x5b\xc4\xe2\xe0\x50\xff\xee\x91\xdd\xba\xc7\x37\x46\x3d\x21\x5d\xac\xa5\x96\xe1\x39\x5b\xbe\x71\xd1\x0a\x2a\x21\xcf\xe0\x8a\x3e\xd4\x6a\xd5\xed\x8c\x7b\xe6\x94\x3d\x7d\x28\x4e\xf1\x6c\xde\xb0\xf0\x57\x1a\x0a\x0d\x32\x79\x65\x23\x5d\x45\xbe\xe0\x2e\x22\x35\xba\x33\x6b\xa0\x82\x45\x8f\x89\xf7\x79\x1e\xb9\x2b\x4b\xe0\xd5\xe9\x83\x67\x95\xf6\xb7\xa2\x1f\x48\xa9\x72\xd3\xfe\xf0\x3d\x47\xe3\x19\x11\xed\xef\xd8\x7e\x4f\x99\x29\xbf\xbc\xcf\x8b\xf3\xb3\x4b\xc6\xc7\x5e\x65\x6d\xa1\xf5\x8d\x09\x92\xf7\x08\xd4\xaf\x33\xcb\xb1\x53\xae\x6a\xb5\x38\x7e\xcc\xf4\xe2\x91\x5f\x0b\x44\xb3\xcc\x99\x31\x32\x47\x67\x61\x31\xd2\x75\xff\x5e\x1a\x1f\xb7\xbf\x3b\xbf\x6a\x83\xb4\x05\xd7\x1e\xe4\x82\xa5\xb0\x31\xc4\x2d\x44\xd4\x91\x30\x88\x6a\x8c\xb3\x1a\x5c\xa8\xb1\xd1\xd8\x47\x22\xce\xd9\x9e\x49\xc5\x8e\x47\x06\xe3\xe8\x15\x5d\xfc\x28\xdb\x3c\x0e\x3c\x43\xd1\xa1\x96\x13\x29\x71\x6a\x1d\x25\xae\x31\xdf\xb8\x9e\xdc\xd0\xf2\xc7\x18\xcd\x6e\xd2\x0d\xde\x8c\x5e\xbe\x18\xeb\xca\xb0\xdc\xe5\x48\x91\xd6\x45\xde\x02\xbb\x65\x0c\x88\x29\xa1\xe7\x15\x16\xb7\xe4\x73\xe4\xc5\xbe\x66\xea\x18\xfa\xdb\x35\x9f\x8e\x62\x77\x83\x93\x56\xd6\x77\x4e\xdb\xf8\x22\x8f\xbe\x03\x31\x6c\xbc\x16\xa2\x89\x35\xe3\x09\x71\xf3\xd4\x9f\xd8\xf8\xb3\x3f\xd8\x87\x34\x8b\x67\x84\x9d\x0f\x55\xcb\x33\x19\x3d\xdb\x94\xd0\xf9\x76\xdc\x1c\x7d\x99\x91\xf5\x56\x48\x29\x26\x9f\xde\xa0\x6c\xa2\xfd\xb8\xf3\xb8\xf5\xb2\x6b\xf8\xa4\xce\x07\xf1\x95\xae\xad\xee\xb1\x28\x95\x52\xc9\x2f\xf9\x86\x7c\x7b\xd7\xea\xcb\x2c\x5b\x05\x63\x8b\x44\xcf\x27\x7a\x3f\xdd\xab\x62\xbe\x02\x4a\xc1\x9b\xda\x3e\xa3\x36\xbd\x54\x84\x41\xaf\x68\xe8\xf8\x71\x31\xc7\x61\x75\xf5\x30\xe5\xc0\x53\xe9\x9c\xc6\xcd\xb6\xbe\x17\xeb\x5f\x33\xbd\x21\xa1\xe1\x54\x98\x92\x3e\xb3\xb3\xc2\x5d\x89\x4a\x0f\x05\x75\x8e\x96\x62\x8a\xbd\x19\x6f\x4a\x8f\x21\x46\x37\xdf\x35\x1e\x56\xa8\x17\x2a\x6b\xa5\xef\xcb\x25\x6e\xf9\x7f\x11\x9e\xc3\x7d\xad\xbe\x08\x9d\x1a\x8b\xd9\xec\x7f\xe0\xad\xd6\x5f\xcb\x8d\xe6\x5f\x1d\xa9\xaa\xb6\x5d\xab\xfd\x66\x1d\x43\xed\xf9\x76\x6c\x7d\x8d\x37\xcf\x8c\xf0\x84\x71\x1c\xae\x62\xa0\xb1\x94\x43\xba\x59\xb3\x56\xb7\xe9\xeb\x23\x97\x75\xff\x68\x5b\xd3\xd3\x1c\x63\x9d\x0f\x81\x85\x9a\xd9\x34\x6c\x1a\x91\xe8\x23\x82\x26\xde\x97\x0a\x0b\x4b\x05\xee\xc8\xc8\xaa\x42\x47\xbd\x0e\xf7\xcf\x25\x93\x07\x05\x14\x90\xc1\xab\x50\xb8\x8d\xee\x54\xbb\x8a\x92\x63\xbc\x0a\x91\xeb\x47\x1d\x4c\x43\x0c\x33\xb8\xae\xb7\x65\x09\x11\xee\x8b\xd1\xcd\xc2\xb2\xf8\x78\x51\x06\x19\xe3\xaa\x45\xa5\x51\x6d\xce\x33\x8b\x03\x18\xb2\x45\xcc\xd5\x0b\xea\x2b\x64\xa4\x45\x83\x60\x8f\x64\x1d\xc5\x67\x55\x9c\xe5\xe7\x04\x37\x7b\xf5\x6b\x5a\xa6\xe1\xac\x0f\x33\x78\x9f\x4f\x6d\x6e\xd3\x08\x18\x46\xd3\x51\xbd\xdf\x5e\xbe\xfc\xe2\xb5\x71\x6b\x94\x04\x6b\x1c\x9b\x2a\xfd\xdb\x60\x7d\xf4\x46\x51\xdb\xc9\x27\x47\xe7\x47\x17\x94\xc1\xf6\x01\xea\xfc\x17\x3f\x29\x7f\xf6\xf8\x44\x1b\x16\xf5\x9c\x15\x22\x39\x9b\xfd\x2a\x78\xf6\x48\x2d\x4a\x7f\xcf\xfa\x5a\xcd\xb2\xfa\x74\x64\x43\x3a\xcb\xd3\x82\xe3\x95\x81\xc7\xab\x90\x94\x5e\xe7\x9c\xb1\x87\x61\x57\xbd\x4a\xe5\xaa\x16\x5b\x91\x4e\xad\xea\xcd\xb9\x03\xc3\x1e\x1b\xbb\x6c\x35\x57\x27\x6b\x1c\x14\x23\xad\x0b\x8a\x6d\xf0\x3e\xcb\x6c\x07\xad\xb5\x19\xe1\x01\x97\x86\xa8\xcf\x67\x2b\x61\x68\x52\x91\xf7\xc6\xc9\xb9\xfe\x97\x5c\xba\x0c\x54\xa4\x84\x87\xb2\x24\x96\x58\xa2\x3f\x7f\x3a\x01\xab\x07\x37\x34\x9b\x97\xdc\x67\xa0\x93\xa0\xef\xed\x0e\x53\x87\x5a\x5d\x62\x60\x29\x55\x44\xe4\xf1\x5e\x54\x4d\xb0\x6d\xba\x29\x1c\x21\xdd\x12\x8b\x18\x7a\x79\x01\x8d\x03\x59\x14\x3e\x1b\x98\x3f\xe1\x27\xaa\x56\xf9\x54\xf9\xa4\x34\x6a\x70\xba\x83\x14\x7b\x87\xab\xc5\x15\xe2\x0e\xfb\x17\xa8\xc7\x1c\xc3\xd4\x1e\xea\x3f\xa4\x5f\xc0\x08\x1f\x0d\x7d\xed\x0f\xfe\x78\x97\xa3\x8c\x14\x9a\xe0\x73\x77\x9f\xcc\x0f\x37\xc8\x01\x2d\x72\x29\x5c\x16\xd7\x46\xcd\x48\x8d\x85\xcf\x2f\xdc\x4b\x47\x5b\x04\x50\x62\xb3\x0d\xfe\x58\xab\x6d\x72\x3a\xf9\x9b\x4d\x0d\xe8\x8e\x60\x21\x00\x00\xf0\x14\x00\x00\x7a\x80\x0b\x70\xf7\x22\x78\x78\x11\xf0\xff\xc3\xa9\xaa\x3f\xbc\xca\xd8\xc4\x73\x0a\xb4\x56\xd3\xc8\xa7\x10\x7f\x66\x4b\x22\x31\xa1\x0a\xfa\x82\x4a\x84\x3d\x9b\x76\x63\x37\x4e\x6d\x6c\xb9\x88\xe8\x70\xdf\x5c\x96\x0d\x6c\xc9\x58\xf6\xb1\x0b\x04\x24\xe4\x4a\x21\xdf\xf7\x3c\xec\x89\x7e\x82\x74\xcb\x0d\xe8\x0f\xd1\xd7\x63\x29\x4d\x0b\xae\x0a\x4a\x63\x92\xab\xe3\x68\x7b\x7b\x01\x4f\x22\x8c\xc3\xca\xfb\x5b\xd9\x1d\xe7\xeb\x46\x70\xdf\x5a\x03\xc4\x4a\x59\x4c\xb7\xa5\x67\xab\xb7\x2f\x68\x5b\x69\x8f\xbb\xcb\x4e\x04\xfc\x76\x06\x81\x3d\x76\x8c\x3a\x55\xae\xa7\x3f\xa0\x00\x00\x1d\x10\x00\x9c\x02\xb8\x00\x22\xce\xf3\x36\xce\xd6\xc5\xfe\x5f\x6f\xfe\xc1\xfa\x3f\x1f\x44\xf1\x0d\x6e\xc1\x52\xa7\x42\xd7\x90\x21\x2d\x85\x63\x41\x3a\x15\x76\x4c\x9f\x84\x56\xea\x94\x01\x44\xc3\x47\x47\x5e\x0d\x6d\xc7\xb6\xe7\xb5\x87\xa9\xaf\x49\xec\x99\xba\xdd\x74\x6d\x7b\x27\x2a\x9c\xf8\x6b\xf9\x65\x08\x90\xaf\x8c\x39\x9b\xac\x65\x46\xd3\x2d\x6a\x83\x1b\xc1\xc1\x74\xcc\xbd\x8c\xca\xf5\xfd\x09\x66\x7a\xbb\x1b\x82\x95\x1d\x19\x85\x7d\xa6\xf9\xe1\x9c\x52\x23\x26\x72\x8d\x26\x79\xf7\x94\xa0\x84\x02\x57\xa8\x40\x27\xfd\xc3\xb0\x50\x38\x96\x56\xcf\x4c\x8d\x07\x33\x3b\x6a\x96\x08\x2f\x05\x15\x93\xe9\x75\xb5\x77\x7c\x34\x68\xed\xf4\x6d\x07\x70\xf5\x57\x15\x27\x75\x33\x89\xa2\x4c\xd9\x6d\x8f\x73\x55\x93\x74\x6a\x1a\xf7\xe2\x04\xae\x0a\x54\xd8\x8d\x3d\x86\xac\xcf\x78\x67\x49\x3b\x34\x22\xa9\x5e\x14\x5f\x50\x19\xe9\x07\xcd\x7b\x12\xa7\xf2\x18\xc6\x24\xe1\x18\x0b\xb4\xff\x08\x7d\x45\x4b\xa2\x53\xf8\xb6\xc7\xe5\x58\x7e\xda\x53\x1d\x50\x6a\xca\x6f\x72\xaf\x37\x3d\x1a\xa1\x5c\xa2\x44\x39\x97\x05\x78\xf5\xa4\x41\xd6\xbb\xea\x67\x78\x8f\xd4\x19\x09\x58\x6f\x21\xa5\x38\x91\xe0\x86\xb7\x7d\xf7\x38\x73\x5d\xcd\xe4\x88\x5c\xd0\x1e\xc2\x32\xa1\x9b\xae\x6f\x94\xc3\x59\x6c\x1b\xdc\x27\xc3\xe5\x38\xc8\x20\xe0\x7d\xc2\x7d\x6f\x20\x41\xb9\x1d\xd4\x39\xd2\xa4\xc2\xfe\x49\xb7\xfb\x53\x41\x22\xe1\x51\x3c\x9d\x00\x59\x36\x75\xff\xcc\xa3\x37\x6c\x7e\xe7\xfd\x4f\x85\x7d\x29\x11\x8b\xe1\x53\x24\xed\x8e\xbd\x3a\x3b\xc0\x19\xc2\x19\xbe\x82\xed\x8a\xf3\xae\x0f\x29\xef\xb7\xf7\x2d\xd1\xa1\x17\x31\xd4\xad\x25\x3f\x5e\x02\x9f\x48\xb5\x1d\xfb\x9b\x8b\x05\xfb\x4d\x9b\x1e\x3b\x85\x36\xc4\x07\xa7\x8f\x16\xb9\x1b\x12\x6c\xf3\x55\xa4\x86\x04\xa3\xdd\x0d\x74\x28\x28\xcf\x51\xfd\x5f\x1d\x04\x76\xe0\xe7\x45\x01\x00\x40\x6e\xd0\xcf\xbb\x3f\xfb\x09\xe0\x5f\xfd\x84\xbf\x7d\xcf\xdf\xb5\xfe\x19\xbb\x7e\xd7\x3a\x43\x05\xfc\x15\xc2\xc0\xbf\x7e\xed\xff\x22\xf6\xcf\x24\xf2\xbb\x98\x21\x08\xf8\x57\x2e\x01\xff\xca\x25\xff\x45\xeb\x9f\xa6\xe9\x77\xad\x4d\x1a\xe0\x2f\x0b\x05\xfe\x65\xa1\xfe\xc7\x2a\xff\x9d\xda\xdf\xc5\xea\x20\xc0\xbf\x31\xfc\xbf\x17\xfa\x4f\x9a\x7e\xd7\x23\x32\x02\x7f\x63\x0b\xfc\x8b\xad\x7f\x28\x82\xa9\x7f\xce\xa2\x06\xa8\x81\x01\x0a\x00\xb8\xc2\xfc\xf3\xe9\xff\x05\x00\x00\xff\xff\x0b\xd4\xb3\x40\x2a\x12\x00\x00")

func terraformModulesFuncsZipBytes() ([]byte, error) {
	return bindataRead(
		_terraformModulesFuncsZip,
		"terraform/modules/funcs.zip",
	)
}

func terraformModulesFuncsZip() (*asset, error) {
	bytes, err := terraformModulesFuncsZipBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "terraform/modules/funcs.zip", size: 4650, mode: os.FileMode(420), modTime: time.Unix(1626956542, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _terraformTemplatesMainTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4b\x6f\xdb\x46\x10\xbe\xf3\x57\x0c\x14\x1f\xd2\xa2\xa6\x52\x18\x05\x02\x03\x3e\xa4\x4d\x8b\x16\x6d\xe3\x20\x76\x2f\xbd\x10\xa3\xe5\x88\xdc\x7a\xb9\x4b\xec\x43\x8e\x44\xf0\xbf\x17\xfb\xe0\x4b\x94\x03\x98\x17\x69\xe7\xf5\x7d\xfc\x66\x76\x28\x14\x43\x61\xa0\xcb\x00\xf0\xd9\x14\x9a\x2a\xae\x24\xc4\xe7\x0e\x36\xe4\xae\x19\x49\xab\x51\x5c\xff\xb8\x81\x17\x9f\x37\xf0\x78\xff\xf1\x1e\x52\xf6\x73\x4d\x9a\x40\x93\x51\x4e\x33\x32\xf0\xcc\x85\x80\x1d\x01\xd3\x84\x96\x4a\x78\x4b\x5f\x19\xb5\x16\x98\x50\xae\xdc\x6b\x25\x2d\x94\xdc\x58\xcd\x77\xce\xc6\x7c\xce\x6a\xe0\x06\x2a\xa1\x76\x28\xbe\x4b\xdc\x5a\xad\xf6\x5c\xd0\xc8\xad\xeb\xf2\x7b\x5d\xa1\xe4\x27\xf4\x69\xf9\x27\x6c\xa8\xef\x57\x2c\x13\xb7\x21\x7b\xaf\x34\x38\x43\xc0\x25\x84\x77\xf7\xa5\x81\x09\x9e\x01\x94\xd2\x14\x27\x25\x69\x4c\xbd\x00\xf2\xf1\xd3\xc3\xbf\x4a\xae\x70\x06\x01\x94\xb3\xf4\xd3\x0d\x34\x28\xb1\xa2\x12\x42\xb5\x28\x47\x29\x0d\x68\x62\x4a\x97\x2b\x41\x3c\xb4\x6a\x90\xcb\x59\xc1\x57\x43\x63\xcb\xc1\x69\x91\x01\xb4\x68\xeb\x45\x44\xac\x95\xe4\xc9\x00\x18\x69\x5b\xa0\x96\xdf\x02\xfb\x85\xb4\xfd\xa0\xe5\x0b\x60\xc6\x88\x50\x85\xef\x39\x43\x1b\x45\xb5\x35\xc1\xf7\x79\x7a\x91\xb7\x43\xaf\xb9\x04\x2c\x0f\x28\x19\xf9\x36\xb6\x5a\xfd\x47\xcc\x16\x3b\xc7\x9e\xc8\x8e\xc8\x3f\x87\xe3\x85\xde\xad\x91\x53\xa6\x07\x4c\xc5\x80\x29\xb9\xe7\x95\xd3\x81\xf8\xd6\x58\xb4\xb4\xdd\x3b\xc9\xfc\xd1\xbc\xc4\xc4\xe2\x4e\x50\x21\xb1\xa1\x85\x06\x8f\xde\x3c\x93\x6a\xaa\x73\x17\xee\x08\x40\xd7\x5d\x83\x46\x59\x11\xe4\xbf\x0d\xce\xbe\x4f\xae\x94\x39\x06\x03\x98\x9b\xe2\x89\x8e\xa9\xfa\xc3\xcd\x9f\x74\x8c\x85\xfd\xc3\x1b\xac\x68\xe6\xfe\xc3\x9f\x17\x11\xda\x49\xcb\x1b\x4a\xfe\x2f\xf1\x34\xb9\x5b\xb7\x13\x9c\x79\xb4\x2e\xff\x1c\xfe\x27\x26\x00\x0d\x35\x4a\x1f\x0b\xc3\x4f\x14\xfd\x7f\x07\xc3\x03\x3f\xd1\x18\xe3\x8b\x29\x67\xa3\xff\x31\x1e\x46\x67\x98\xa2\x88\xfb\x19\x6d\x3d\x81\x3a\x2d\x92\xfd\x9f\x2f\x7f\x4d\xe6\x1a\x65\x29\x48\x27\xd7\xef\xf1\x34\xb9\x49\x1e\x66\xaa\xcc\x65\xbc\x7a\xa2\xe3\x0f\x70\x75\x40\xe1\x08\x6e\xef\x20\xff\x55\x1e\x46\x16\x3e\xd0\x07\x04\x4d\x37\x5d\x17\xc3\xa6\xb2\xb1\x10\xc9\x72\xcc\x88\xbf\x7d\x76\xee\xeb\xb3\x3e\xcb\x2c\x69\x8d\x7b\xa5\x9b\xc0\x64\x87\xec\x89\x64\x09\x1b\x73\xb3\x49\xd4\xd2\x78\x9d\x8d\x65\x70\xf9\x3e\xc5\x39\x19\xab\xc4\x61\xcb\xed\x3e\xfc\xc6\xb0\xb4\x03\xcf\x77\xe7\xc0\xa0\xd5\xea\xc0\x4b\xd2\xb0\xc1\x67\x13\x51\x17\x3b\x77\x71\x6d\xc3\x82\xca\xa7\xbd\xec\x17\x05\xed\xd1\x09\x5b\x58\xac\x4c\xe2\x1c\xfe\x4e\xda\x22\x63\x64\xcc\xf5\x70\x3b\xe2\xab\x7c\x08\xc6\x47\xac\x86\xb7\x19\x25\x69\x54\xe9\x04\xc1\xc6\x4f\x7a\x22\x14\xf7\xf6\x6c\x39\xd4\xd6\xb6\xb7\xdb\x6d\xa0\x53\x2b\x63\x6f\xdf\xbf\x7b\xff\x6e\x3b\xc9\x10\x6b\x98\x70\xeb\x4c\x7e\xe2\xed\x66\xb5\x4d\x87\x97\x19\xac\xab\x9d\x37\x06\x04\xab\x5f\xf9\x2d\x2f\x76\x68\xa8\x48\x93\x18\xdd\xfe\xb0\x5a\x61\x83\x73\xb0\x2e\x2e\xee\x3c\x60\xb4\x66\xe1\x66\x8e\x6b\x68\x8a\x58\x6e\xa8\x0c\xd2\x37\xa8\x98\xcf\x6f\x22\xbe\x62\xbc\xd0\xb3\x3c\x4a\x6c\x54\xb9\x3b\x93\xf4\x15\x6a\x0e\x15\x06\x41\xc7\x65\x35\x00\x4f\x3b\xcc\x03\xbf\x01\xfa\xda\x2a\x43\xe1\x83\x96\x66\x0a\x65\x79\xe9\xc3\x67\x6a\x12\x02\x0c\xd3\xbc\xb5\x26\x53\xce\xb6\xce\x86\x81\x4c\x73\x16\x39\xc7\x1b\x79\x61\x0a\xfb\x6c\x91\x93\x00\x5e\x4a\x4a\xee\x45\x56\xcb\x0b\xa7\xc5\x32\x23\xe8\x62\x6e\xb7\xdb\xab\x6e\xae\x6b\x3f\x9e\x7d\xeb\xfb\xcd\xbc\xce\xd8\xce\x65\xa5\x28\x60\x1e\xa7\x71\x6a\x79\xbf\xce\x4b\x6d\xbe\x44\xfd\x6c\x10\xa6\xe4\xa1\x2d\x45\x90\xff\x22\xf2\xd8\xb9\x45\x87\xfe\x0f\x00\x00\xff\xff\xd4\xc1\x15\xa7\x6b\x09\x00\x00")

func terraformTemplatesMainTfBytes() ([]byte, error) {
	return bindataRead(
		_terraformTemplatesMainTf,
		"terraform/templates/main.tf",
	)
}

func terraformTemplatesMainTf() (*asset, error) {
	bytes, err := terraformTemplatesMainTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "terraform/templates/main.tf", size: 2411, mode: os.FileMode(420), modTime: time.Unix(1626955201, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _awsProjectPolicyJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\x41\x4b\xf4\x30\x10\x86\xcf\xcd\xaf\x08\x39\x96\x6d\x77\xbb\x7b\xf8\x60\x6e\xfd\x40\xbc\x88\x82\x8a\x17\xf1\x10\xc2\xac\xc6\x6d\x93\x65\x32\x65\xd1\x90\xff\x2e\x69\x4b\x41\x0f\xa2\xb2\x39\x0d\xf3\x3e\xef\xe4\x89\x42\x4a\x29\xd5\x03\x52\xb0\xde\x29\x90\x6a\xbb\x69\xb6\x55\xb3\xa9\x9a\x7f\x6a\x35\x85\x77\xac\x19\x7b\x74\xac\x40\x3e\x8e\xab\xfc\xe2\x32\x8d\xd0\xc5\x7e\x8f\x26\x13\xaa\xed\x3a\x7f\x9a\xbb\x4b\xdc\x1a\x9e\xef\x87\x1d\x5c\xd9\xc0\xff\x07\x73\x40\xfe\x8a\xdd\x62\xf0\x03\x19\xcc\xa0\x26\x07\xfa\x14\x20\xec\x00\x20\xc6\x7a\x6a\xa4\xa4\x96\x4a\x5a\x9d\xc3\xa6\xfc\x8b\xc4\xba\x3c\xab\x06\x1a\xfa\x99\xc7\x08\x42\x09\x84\x47\x1f\x2c\x7b\x7a\x5b\xf7\xda\xb1\xed\xaa\x23\xf9\x57\x34\x5c\xc5\x58\xdf\xd0\xb3\x76\xf6\x5d\xe7\xeb\xf5\xb5\xee\x31\xa5\xbc\x9e\xa6\x4f\xde\x45\x14\xc5\xef\x4d\x2f\x91\xdb\x81\x5f\x3c\xcd\x7f\xdc\xfb\x03\xba\xef\xec\x4b\x25\x8a\x34\xc6\x4f\x22\x89\x8f\x00\x00\x00\xff\xff\xdb\x19\xd8\x94\x74\x02\x00\x00")

func awsProjectPolicyJsonBytes() ([]byte, error) {
	return bindataRead(
		_awsProjectPolicyJson,
		"aws/project-policy.json",
	)
}

func awsProjectPolicyJson() (*asset, error) {
	bytes, err := awsProjectPolicyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aws/project-policy.json", size: 628, mode: os.FileMode(420), modTime: time.Unix(1626947162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github/mantil-workflow.yml":     githubMantilWorkflowYml,
	"terraform/modules/dynamodb.zip": terraformModulesDynamodbZip,
	"terraform/modules/funcs.zip":    terraformModulesFuncsZip,
	"terraform/templates/main.tf":    terraformTemplatesMainTf,
	"aws/project-policy.json":        awsProjectPolicyJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aws": &bintree{nil, map[string]*bintree{
		"project-policy.json": &bintree{awsProjectPolicyJson, map[string]*bintree{}},
	}},
	"github": &bintree{nil, map[string]*bintree{
		"mantil-workflow.yml": &bintree{githubMantilWorkflowYml, map[string]*bintree{}},
	}},
	"terraform": &bintree{nil, map[string]*bintree{
		"modules": &bintree{nil, map[string]*bintree{
			"dynamodb.zip": &bintree{terraformModulesDynamodbZip, map[string]*bintree{}},
			"funcs.zip":    &bintree{terraformModulesFuncsZip, map[string]*bintree{}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"main.tf": &bintree{terraformTemplatesMainTf, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
