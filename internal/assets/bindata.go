// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// github/mantil-workflow.yml
// terraform/modules/funcs.zip
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _githubMantilWorkflowYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xc1\x4e\xc4\x30\x0c\x44\xef\xfd\x8a\xb9\x43\xb2\x42\xdc\x72\xe6\xca\x17\x20\x84\xbc\x4d\xa0\x0b\x89\x1d\xd5\x8e\x02\x88\x8f\x47\x9b\x56\x15\x12\x37\x7b\x66\x9e\x3d\x4c\x25\x05\x3c\x12\xdb\x25\xa3\xcb\xfa\xf1\x9a\xa5\x4f\xc2\x01\x4f\xb5\xe9\x72\x7b\x68\x2f\xf1\xa2\x95\x6c\x5e\x9e\xa7\x77\x39\x6b\x98\x80\x87\x54\xb3\x7c\x5d\x27\x60\x6d\xac\xee\x8a\xb5\x73\x63\x6b\x2e\x93\x25\xb5\x61\xa9\xa5\xaa\x5b\x0a\x70\xd8\x3e\x6e\xec\x2e\x0e\x3c\xe0\xe7\x58\x81\xfe\x96\x0c\x8b\x59\xd5\x70\x3a\x95\x51\xcf\x45\xe9\x9c\x85\xa2\x7a\xbd\xf7\xa9\xb9\x39\xb1\xad\x94\xdd\x9d\xa7\x42\xdf\xc2\xd4\xd5\xcf\x52\xf6\xf8\x9f\x63\xf3\x52\x24\xe2\xe6\x13\xff\x1c\xbf\x87\x11\x47\x9f\xdf\x00\x00\x00\xff\xff\xd1\x80\x79\x97\x0e\x01\x00\x00")

func githubMantilWorkflowYmlBytes() ([]byte, error) {
	return bindataRead(
		_githubMantilWorkflowYml,
		"github/mantil-workflow.yml",
	)
}

func githubMantilWorkflowYml() (*asset, error) {
	bytes, err := githubMantilWorkflowYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github/mantil-workflow.yml", size: 270, mode: os.FileMode(420), modTime: time.Unix(1625817185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _terraformModulesFuncsZip = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x98\x75\x50\x54\xfd\xf7\xc7\x2f\xdd\xe9\x22\xb1\x12\x82\x84\x74\x08\x8b\xd2\x1d\x92\x22\xb0\xd2\x21\x48\xb3\xf4\x82\x80\x74\x09\x12\x0b\x08\xca\xd2\x20\x21\x9d\x2e\x1d\x82\x74\x2a\x48\x48\x2c\xb0\xd4\x82\x02\x52\x0f\xc8\x6f\x9c\xe7\xfb\x9d\x9f\xcf\x33\xfe\xe1\x77\x67\xf6\xce\xdc\x3f\xee\x7b\xee\x39\xe7\xf3\x7e\x9d\x7b\x8e\xde\x7d\x3c\x7c\x10\x40\x0c\x10\x03\x02\xfe\xeb\x0f\x80\xff\xfc\xe2\xf0\x01\x80\x1c\x60\x03\x7c\xad\x3d\x1d\xad\x6d\x5c\xec\xbc\x04\xbd\xed\x0d\x1f\x52\x00\x44\x51\xf8\x68\xab\xff\xfe\x7d\xe0\x64\x00\x0e\xfe\x77\x1c\x00\xc0\x07\x01\x00\x90\x96\xda\xa5\xd3\x23\x4c\x2e\xbf\xff\x17\x69\xf9\x9b\xae\xbc\x97\xb1\x68\x4a\x07\xb6\x3d\x34\x1e\x2f\xc4\xa3\x25\xe6\x4e\x65\x8a\x77\xb5\xf6\x85\x94\x8e\x44\x71\x2d\xe5\x78\x80\x53\xca\xdc\xfe\x67\x0d\x94\x8a\x7b\x75\x23\xbe\x8a\x98\x24\x1d\x45\x8b\x5e\xa7\x35\x61\x6e\x69\x57\x97\xaa\xfa\x18\x2d\x65\x8e\x3f\x2f\x8f\xfb\xf9\x51\xb2\x16\x9d\xee\x34\xc3\x93\x83\x18\x70\xf5\xec\x47\xa6\x95\xac\xa2\x08\x63\xf6\xcd\xf1\x66\xd1\x41\x5e\xbe\x7a\x1c\xa6\xe3\x10\x91\x00\x03\xaa\x64\xc5\x47\xc3\xb2\x4f\xea\xb0\x9f\x73\x1b\xcc\x0a\x2a\x3e\xb8\x26\x92\x7a\xcc\x20\x42\xee\xed\x62\x36\x7d\xfd\x38\x4a\xed\x2c\x88\x06\xfa\x07\x0a\x55\x2d\x3f\x9c\xc6\xa1\xef\xeb\x90\xa4\x4c\xc2\x7d\x99\xdf\x11\x2f\xb5\x22\x12\x1a\x38\x30\x64\x37\xb1\x8a\x0d\x4f\xd4\x38\x90\x53\x75\x11\x6c\x86\xcd\xbe\x9a\x66\x75\xa9\xc7\xd5\xd4\xce\xd1\x02\x8e\xea\xdf\xbe\xb6\xdf\xd4\xa5\x66\x4c\xe5\x8e\xc7\x9f\x05\x3b\xac\xaf\x33\xfb\x2d\x6b\xd4\xcc\x08\xbf\xa1\xda\x0d\xb8\x5f\xb4\xba\xb7\x37\x19\x6e\xc0\xea\x5e\x03\x1f\xa4\x59\xae\x2e\xb0\xcd\xe4\x58\x36\x23\xb4\x63\xd8\x3e\xa0\xca\x67\x67\xe5\x3b\x82\x88\x18\xd3\xda\x32\x15\x3c\x08\x8d\x65\x84\x78\xa7\x11\xd4\xfa\x5e\xe5\x84\xf4\x1a\xde\xd4\x24\x2a\x7f\xd8\x23\xc7\x84\x46\x98\xac\x19\x69\x63\x59\xd4\x98\x3f\xc4\x7a\x79\x09\xfa\x49\xf3\x97\x05\xe8\xb9\x83\xdc\xd9\x50\x5d\x73\xb7\xf7\x7d\x70\xfa\xb5\xde\x8c\xc8\xb1\x8a\xca\x33\x3a\x6e\x0b\xec\xab\x5b\x1e\x68\x9c\x91\x36\x1c\x83\xba\x13\xa5\x84\x15\xae\xa2\x82\x2c\x2a\x56\x52\xad\x70\x25\x90\xa9\x41\x6b\x6f\xfe\x62\x78\x03\xbf\xb1\xba\x91\x6e\x61\xb9\x75\x18\x67\x7a\x76\x5b\x98\x3c\x54\xfa\x68\xf8\xf8\xfc\xa6\xd6\xad\x63\xfb\xc4\xdb\x82\xce\x81\x38\x7a\xf7\x89\x88\x79\x89\x20\xb2\x69\x38\x7f\x17\xf5\xf7\xe5\x86\x52\x00\x00\x21\xc0\x06\x38\x5a\xbb\xfe\x41\xa1\x47\x8c\x4c\xdd\xa7\x84\x41\xc1\xfb\x55\xd5\xb8\xba\x53\x93\x95\x60\x61\x9a\x50\xbd\x2d\xc2\x57\x77\xac\xb6\x9b\xa5\xd9\x1e\xfa\x8f\x6e\x39\x8d\xc4\x86\x63\xeb\x53\x4b\xaf\x90\x5e\x9e\x5b\x29\xc5\x5b\xa4\x78\xb1\x46\x4e\x88\xac\x7d\xb3\x8e\xb1\x1a\x0a\x28\x92\x09\x67\x18\xed\x25\x95\x2e\xcd\x04\xae\xe8\xb4\xcd\x5e\x9d\x30\xfc\x20\xe3\x3b\x6f\xcd\xbf\x41\x53\x7d\x8e\xe1\x3c\x64\x59\xe2\x15\x68\xde\x4e\xf1\xd9\xa2\x87\x2b\x4b\x05\xbb\x82\x37\x4d\x8f\xb3\xc3\xea\xdf\x61\xeb\xae\x31\x7b\x30\x72\x58\xf5\x69\x43\x86\xdd\xd3\x19\x12\x4c\x5f\xab\x26\x19\x8a\xeb\xd4\xa7\xd8\x84\x66\xd0\x0b\x5d\x4c\x51\xb9\x8f\x6b\x7e\x14\xd9\x08\x22\xb4\x2d\x7a\xd1\x16\xe2\x1f\x4d\x74\xa9\xd4\xf1\x6c\xf9\x24\xb1\xed\x72\x01\xbe\xd5\x1c\x4e\x6c\x13\xbd\x51\x85\x6c\xcd\x9d\xd7\x79\xf4\x0a\x42\x5d\x09\x6b\x18\x25\x0c\xe7\x5f\x8c\xb1\xaf\x7e\x16\xfd\x4e\x58\xf4\xba\xe8\x0a\xa9\xb5\x5f\x25\x08\x3c\xac\x45\xca\xb6\xdf\x8a\x10\x4c\x3c\xd5\x65\x46\x0b\xb7\x28\xaa\x7d\x21\x6d\x79\xab\x2c\x85\xd4\x92\xd7\x13\xff\x22\x7f\x5b\x46\x48\x61\x68\xf7\xca\x94\xbb\x23\xff\x47\x3a\xf2\x85\xe3\x57\x0e\xdb\x1d\x38\x3f\x8c\x49\x55\x77\xcd\xbe\xb2\xb1\x5a\x29\x5c\xf9\x69\x1a\xd6\x4d\xff\x9e\x02\x04\xf3\x56\xeb\x59\x9a\x1b\xf9\x35\x53\x84\xda\xfd\x07\x39\x30\x3b\x9b\x4f\x29\x26\x51\x31\x0e\x05\x27\x2c\x61\xa6\x3c\x95\x53\x0b\xa2\xe7\x97\x3e\x9d\x25\x9b\x48\xb6\xa7\xda\x87\x9a\xfc\x96\x33\xfc\x99\x74\xa0\x26\x1d\x52\x9b\xf7\x82\xfc\x46\x20\xf2\xb4\xde\x32\x55\x93\x96\x50\x6a\x2b\x57\x8e\x55\xa3\x0e\xbf\x7b\xef\xd3\x83\x87\xd6\x9f\x27\x53\xb6\x8a\x27\xba\x27\xc8\x46\xdd\xa3\xb4\x9b\x18\x3c\x4f\x12\xed\x74\xae\x98\x79\x6f\x51\xc7\x11\xdb\xc5\x19\x33\xdd\xa9\xd6\x63\xfb\xda\x01\xa1\xfd\x31\xb3\x3e\x19\x29\x3b\xa4\xf3\x57\x90\x7f\x50\xd5\x01\xa4\x6c\x9c\x05\x7b\x4b\x31\x02\x5b\xa8\xa0\xc0\xc1\xad\xcc\xa2\x34\x37\x54\x40\x26\xe8\x76\x2a\x5e\x6d\xfc\x76\x0c\xd7\xb7\x93\x45\x84\x25\x4a\xab\xdf\xa9\x6b\x2d\x22\x32\x89\xa7\x8d\x0d\x5b\x53\x08\x68\x0e\x7d\x5d\xb7\x4b\x9c\x35\xe4\x75\xeb\xbc\xe4\x1e\xfc\x22\x68\xfe\x14\xb4\xbb\x28\xf4\xfa\x7c\xfb\xd4\xf9\x46\x98\xb0\xc5\xc4\x44\xe3\xcc\x4b\xdd\x66\xf2\x86\x75\xce\xf4\x1a\xe8\x01\x5c\x0d\xbd\x05\x3b\xe2\x96\xb6\x51\xe5\xe2\x68\x1d\x08\x93\x70\x0c\xe4\x49\x6e\x18\x79\x0c\x8e\x74\x3d\xf2\x87\x5a\x7f\x7d\x25\x25\x12\x44\xb6\x17\xcf\x6b\x6e\x2b\x8b\x97\x8b\x55\x1e\xb3\x2d\xf2\x3f\x1d\x28\x81\xcc\x65\x1d\x12\x64\xf0\x86\x8a\x57\xce\xc3\x2b\x6b\xcd\xbe\xd0\x69\xc9\xd9\x9c\x5d\x68\x9c\xd5\x29\x57\x33\xb0\xd5\x9f\xee\x6c\xcc\x2d\x2c\x2b\x11\xd9\x77\x13\xb0\xb9\xe1\x5f\x13\x0e\x01\x43\x3b\x8b\x47\x39\x25\x36\xbf\xc3\x94\xae\x41\x02\xa2\xa8\x5d\x5e\x1f\x8f\x7c\x39\x01\xf1\x7f\x77\x7e\xaa\x7b\x7e\x89\x46\x63\xc6\xb2\x8f\x93\x76\x15\x89\xdc\x48\x65\xdd\x82\xc5\x18\x15\x37\x7b\xa8\x02\xc9\x68\xa6\xb9\xe9\x4e\xf3\x08\x77\xfa\xe7\xce\x0c\x64\x95\x40\x19\xea\x26\xf9\xef\xcf\x75\xfe\xe2\x21\x58\x8f\xb6\x8a\x4c\x36\x6e\x71\xba\x66\x3a\xbb\x45\xa0\xd4\x4c\x84\xf5\xa4\xba\xd7\x5b\x7f\xff\x49\x1d\x4c\x8f\x2e\xba\x4b\x43\x96\x04\x9e\x53\xe7\x6d\x94\xf2\x70\xa9\x48\x74\x73\x1c\xd8\xb0\x24\x92\xf0\xe0\xce\xb5\x82\x98\x65\x9f\xbf\x95\x1c\x76\x51\xbf\x0b\x2b\x89\x73\xe4\x98\x26\x35\xd2\xdf\xb5\x6f\xdb\x83\x67\x9b\xd0\x08\xa6\xea\xf4\xdc\x15\x28\xda\x28\x6d\x4a\xf8\x1e\x47\xa5\xff\x7c\xf2\x2d\xfc\x68\xf3\x91\x60\x53\x84\x64\xee\x93\x27\xe1\x7e\x45\xb8\x5c\x73\xc2\xd9\x48\xd2\x8c\x29\x17\xf5\xe4\xf6\xb7\xec\xeb\x49\xec\x93\x72\x77\xf7\x3e\xad\xe5\x1e\x35\x08\xa8\xcb\xce\xcc\xb8\x27\xe8\x20\xee\x71\xf8\x74\x16\xf5\x94\x3b\xe0\xad\xb2\xfb\x38\xc8\x22\xad\x03\x9e\xca\x19\x2e\xf4\xe2\x30\xdf\x12\x9d\x91\x39\x0f\x78\x86\xcd\x30\x7b\x34\x6c\x9b\xad\x71\xfb\xf5\x80\x93\xb9\xc1\x68\x16\xc6\x66\x60\xa3\xc0\x4d\x86\xfe\x65\x56\x7c\xcd\x26\xa9\xe0\xb3\xd9\xb6\x29\x05\x7a\x2c\x74\x42\xe8\xa7\xdf\xd5\x70\xf5\x91\x59\x78\x7f\xbb\xfa\xf7\x7e\xef\xa1\x00\x00\x22\x80\x0d\x70\xb5\x76\x74\xfb\x13\xb2\x1b\xbb\x26\x4e\x49\x52\xff\xf8\x62\x29\xf2\x32\xac\x51\x65\xd1\xdb\xda\x07\xd6\xf4\x80\x0a\xdb\x15\x66\xb4\x8a\x8f\x2b\xeb\x91\xc5\x0e\xf1\x78\x60\xc9\x2c\x55\x8b\xdc\x4b\x37\xbc\x92\x12\x6b\x44\x70\x2d\x78\x86\xa9\x57\x30\x3d\xdd\xc8\x34\x1e\x43\x6b\x22\xc5\x1c\x57\xdc\x70\x73\xa1\x23\xd6\x04\x51\x90\x94\xf5\xc0\x46\x5b\x2e\x01\xef\x91\x08\x13\xf9\x14\xae\x53\x9f\x57\xc3\xfa\x5a\xb3\x54\x98\x7d\x68\xbb\x1d\x9d\x06\x22\x55\x66\xec\x93\x6b\xfb\x3a\x65\xf0\xa3\x50\xa7\xa2\xa3\x07\xc6\x42\x5f\x12\xdf\xc3\xdd\x44\x8d\x40\x51\xa6\xf3\x64\xf9\x6b\x20\x7e\xa7\xeb\xad\x8f\x2b\xbc\xaf\x67\xf0\xe6\x2a\xb0\x66\xac\xe8\x35\xf2\xfa\x29\xf2\x59\x8d\x32\xd6\xb8\x31\x37\x95\x8c\x57\x98\xf4\xb6\x85\x3f\x00\xcf\x0a\xe6\xe2\xe7\xb5\xa6\xa1\xf7\x08\x5c\xac\xbf\x13\xf1\x86\x50\x25\xb2\x1c\x79\x0f\x9d\x34\xa3\x87\x83\x8d\x8a\x57\xe8\x38\x9e\xc2\x9a\x64\x0a\x2d\x95\xd1\x78\x85\x6a\xd3\x9b\x10\x57\x0b\xf9\xcc\x63\x21\x8f\x3a\xb1\xe4\xb3\x78\xf3\x24\x54\xe1\x9d\xe2\xa3\x60\x49\xce\x6a\xfc\xf4\xfb\xa4\x05\xa0\x26\xbc\x67\x6d\x17\x09\x30\x30\x71\x6c\x02\xbc\xd8\x50\x07\x5e\x08\x88\x0d\x2e\x7a\xe5\x94\x7c\x59\xe7\x79\x2e\x6b\x7c\xee\x11\xf0\x7a\x98\x04\x70\x3d\xbb\xb8\xfb\xd9\x96\x84\x2c\xed\xc5\x29\x78\xb8\x74\x6d\x23\xfa\x6b\xc1\x2e\x7b\x59\xbe\x57\xeb\x6a\x53\xdd\xda\x21\xe6\x65\x62\x35\x51\x3b\xba\xf7\x86\x11\x9f\x7a\xaa\xe0\x69\x87\x84\xc2\x07\xe5\x92\xb0\x25\x5f\x2b\x92\xf5\x98\x55\x6d\xf6\xed\x1b\xc1\x7b\x5b\xab\x88\xca\xc4\xc8\x41\x9d\x63\x9e\x71\x44\x72\xc3\xb5\x0e\x63\x47\xc9\x9b\x08\xee\x89\xc7\x23\xce\xae\xc7\x99\x74\x96\x70\xd6\x1d\x2b\x57\x9c\xc4\x9c\x0b\x89\x8e\xa5\xc7\xd4\x78\xb4\xcf\xad\x40\xad\x6e\xe6\x54\xa0\x25\xfa\xaf\x47\xbb\x5f\xc6\x09\xad\xf4\xef\xe0\x7a\x34\x28\x25\xbd\x7a\xcd\x9b\xd5\xa4\xb9\x2d\x8e\x60\x14\xf4\x2b\x3d\x96\xdb\xa7\x3c\xf4\x27\x5a\x8b\xbc\x49\x7c\xde\x33\xc9\x4a\x6b\x69\x46\x15\xab\x17\x36\xd0\x20\x27\x70\x74\x87\xdc\xb4\xd2\x2b\xdd\xe2\x7a\xf5\x65\x07\x13\xf9\xc5\xf7\xb2\x0c\xb4\xed\x49\x53\x14\x8a\xf3\xb3\xe4\xcc\xec\xf3\xf5\x83\xae\x45\x0f\xbd\x1b\x5f\x5d\x5d\x6e\xb1\x44\xf8\x0a\xa8\x04\x1f\xa5\xb2\xd9\x3f\xe4\x1c\x56\x0e\xf7\x9f\xd6\xdc\x6b\x41\x40\x08\xf4\x71\x1b\x0f\x54\xc1\x5a\xcd\x37\xe7\xef\xb0\xaa\x26\xaf\xbe\x9a\x84\x32\xd8\x37\xb6\x02\xf6\x52\x78\x15\xeb\x49\x3b\x9a\x24\x6f\xa2\xa9\xeb\x16\x60\x1b\x7a\xb4\x6a\xf8\xce\xca\xdb\x83\xa3\x0c\x24\xd6\xc2\xa0\xd0\x2b\x0d\x73\xad\x4b\xd3\x55\x2d\xe9\x63\x0d\x79\xcb\x88\x8f\x67\x0e\x2d\x14\x02\x1e\x19\xe3\x18\xe1\x4c\xad\x15\xf4\xfc\x4b\xf7\x9a\xc2\x80\xfe\x9b\x94\x2a\xee\xc8\x85\x46\xd4\x06\x04\xec\x26\x19\xb7\x08\xd3\xbb\x61\xae\xa8\x0b\x71\xe9\x27\x52\x62\xa7\x94\xdb\x77\x55\x86\x7a\x69\x5d\x27\x0a\x1e\x3a\xfc\x44\x62\x18\x3a\x6f\x45\xea\x64\x5e\x9f\x52\x7d\xcb\x98\xee\x5e\xd5\x10\x4f\xce\xfb\xae\xf0\x59\x67\x1d\x61\xb7\x9e\x2e\xe1\xc8\x20\x31\xa9\x70\x03\xc9\x67\x12\x6a\x02\x59\x3d\x28\xf1\xbb\xd1\x11\x8b\xb3\x6f\x73\x56\x48\x6e\xb5\x09\x91\x50\x8e\xde\xfe\xf8\x38\xbe\x25\x3f\xf6\xc9\x7c\x83\x8f\x7d\x2f\xed\x13\x32\xc9\x67\xf7\xe4\xb2\xb8\x2c\xb6\xa2\x7d\xb2\x93\x74\xdc\xc5\x9c\xea\xcc\x28\x99\x68\x1b\xc0\x1c\xbe\xd0\xde\xea\x1d\xa8\x5d\x74\x8b\xdf\xd7\x49\xb4\x4a\x31\xc9\x32\x94\x26\x25\x2d\x7f\xed\x4c\xf6\xa5\xb4\x58\x46\x25\x03\x0d\xb3\x4c\x63\x7a\xc6\xba\x61\x89\x0d\xf4\xa1\xc9\x7a\x85\x88\xd9\x3b\x97\xfe\x84\x22\xc6\x7d\x61\x0f\xa3\xd3\x73\x9f\x32\x80\x60\x3e\x71\x57\x6e\xc7\xef\xed\x54\xd4\x2c\xfb\xcb\x61\x5a\x05\xce\xaa\x25\xb3\xf6\xe6\xf6\x80\x1c\xe5\xd8\xe5\x6b\x41\xb6\x4d\xf1\xf7\xd9\x1e\xb5\x09\x42\x3f\xd9\xad\xce\x2b\x02\x23\x0d\xf1\x75\x37\xe6\xef\x50\x1e\x04\xe7\xc0\xa7\x1d\xe2\xdd\x96\xaf\x29\x90\x1a\x3d\xa9\xcf\x26\xdc\x4d\x65\xa4\xe3\xa1\x1f\x83\x86\x4a\x57\x9d\x88\xf7\xc5\x45\x4b\xc3\x70\x24\xe8\x8a\x47\xb2\xfb\xe7\xb4\xa5\xad\xfb\x58\xc8\x73\x39\x50\x39\x47\x11\x73\x60\x2c\xf1\x06\x5c\x05\x4e\xb9\xe6\x89\xb2\xad\x5d\x77\x1c\xeb\x50\x3b\xb8\xaa\xe4\x86\x9b\x13\xdf\x91\xde\xda\x6c\x16\x5f\x05\x8b\x71\xb0\xf4\x1c\x4d\x0f\x8f\xa4\x44\xb7\xac\xf7\x30\x7b\x7e\x84\xf8\xbd\x78\x3f\x9e\x9c\x3d\x89\x41\x8a\x8d\x7f\x1e\x5d\x68\x5f\x59\x12\x4f\x31\x43\xd8\x8b\x12\x5b\x07\x82\xa1\x14\x15\xf1\x8d\x5c\xb6\xb4\x61\x35\x9b\x30\x67\x4d\xc3\xd3\x9d\xb1\x81\x64\x07\xd4\x11\x25\x28\xca\xd4\xa2\xeb\xc0\xac\x1c\xb7\x1f\xb7\x25\x72\x69\x6c\xd4\xea\xf8\xd4\xb8\x24\x32\x5f\x7f\x26\x79\x43\x46\xb8\xa7\x62\x6b\x0d\x4e\xff\x4e\xcd\xbb\x59\x3c\xf2\x9a\xee\xa5\x72\x95\x5c\x00\x83\xcc\x22\x49\x41\x5a\x95\x77\x73\x8a\x7f\x71\xb7\x97\x43\x7f\xb1\x1e\x8c\xb6\x78\x1b\xd4\xad\x1e\x69\x8e\xb0\x4d\x7d\x61\xdc\x47\x65\xd0\x11\xe9\xcc\x48\x68\x1e\x37\xd8\x73\xa6\x4f\x60\x0c\xf7\x4c\xae\x98\x6f\xe8\xae\x6c\x00\x2f\x0e\x86\xf5\xb1\x3d\xca\x8b\x75\xb8\x20\xb1\x21\xad\xb4\x08\xea\xa4\x89\x13\xb1\x06\xd4\x4b\x2b\xc1\xa9\xe9\x83\xf0\x77\xb6\x8a\xb5\x0d\x49\xdd\xd8\x15\x84\x91\x34\xf6\x9b\x25\x83\x2b\x76\x6b\xfd\x4d\x6e\x3c\xbd\x51\xd6\x70\xaf\x2a\x05\xa4\x01\xa6\x2e\x86\x74\x80\xdd\xbc\x16\xc9\x7c\x0b\xe3\x9e\x2f\xb3\x92\x19\x53\x5c\x49\x1f\x8b\x1f\x2e\xc3\xf9\x40\xff\x62\xaa\x14\x5d\x0d\x71\x90\x2d\x8f\x77\x03\x53\x85\x6f\x5b\x38\xd7\x4f\x21\xb1\x25\x8c\x8e\x31\x1a\xa5\xee\xcb\x07\x8b\xe2\xad\x7d\xa5\xfe\x3d\xc7\xa0\x16\x3d\xa9\xb6\xf5\xaf\x7d\x7c\x47\x09\x4f\xaf\x18\x0e\x56\xa0\x60\x42\x9a\x5a\x7b\x23\x82\x2c\xfe\x90\x8b\x27\xec\x8b\x62\x5d\x7d\x87\x5b\xdc\xa3\xb1\x3e\x0e\xcf\x51\xf8\x05\xc7\x3d\x57\x29\xf9\x5d\x56\x36\xfc\x33\x5d\x91\x24\x13\x11\x39\xc3\x6a\xaf\x88\x05\xcd\xf0\x63\x8d\x17\x79\x8a\xa6\x5c\x23\x06\x55\x7a\x1e\x73\xc7\x8a\xbc\x4f\x7a\x60\x54\x27\x64\x62\x8d\xef\x58\xb9\xd3\x8b\xb9\xe2\xf0\x55\xac\x0d\xac\x0f\x4c\x95\x2f\x48\x80\x84\x21\x31\x3b\x48\xcc\x11\x55\xf1\x1d\x54\x9f\xc4\x1c\x3a\xaf\xef\xb9\x2a\xce\x91\x10\xc1\x12\xca\x2c\x80\x1a\xb5\xdd\x5f\xc9\x64\xb4\x7a\xf9\x31\x3a\xb1\x5e\x3e\x81\xb6\x50\xec\xc6\x70\x28\xfb\xed\x84\x1e\x17\x8e\xec\x82\xc8\x54\xd9\x6f\xb8\x21\xb1\x8a\x67\xe1\x27\x94\xe5\x97\x74\x3f\xd1\x1f\xf6\x82\x82\xbe\x98\xe0\x6f\xc0\xff\x1e\xfd\x7b\x38\x7f\xa3\xdf\xda\xc7\xdb\xe1\x57\xf4\x47\xff\x1e\xfd\x91\x49\x5d\x9a\x78\x22\xd4\x51\xfb\xfe\x71\x1e\x6d\xd1\x01\x74\x71\x31\x31\xc4\xab\x71\x1f\x11\xea\x0c\xaf\x6a\xc0\x0e\x08\x1f\xd1\xf9\xda\xb8\xfd\xbd\xc7\x2d\x93\x45\x20\xb3\x0f\x76\x98\xa1\xab\xcb\x4c\x2f\x28\xf7\x51\xb5\x56\x39\xc3\x2d\x1c\xdf\xc9\x5b\x94\x96\xbd\xd4\xb2\x56\xcf\x5d\x86\x58\x89\x19\x45\x49\x78\xd8\x28\xb4\xf3\x62\xc0\xa2\x2c\x04\x79\xdd\xe6\xbe\xb6\xf1\x3b\xa2\x35\xce\x06\x26\x18\x4d\xa2\x38\xe3\xaf\xae\xf2\x02\xe6\xa0\x0c\x56\xcf\xb1\x0d\x3d\x43\x18\x01\x3d\x8c\x44\x8c\x40\xf3\x86\x16\x70\x68\x4b\x6e\xa0\xc3\x2c\xe4\xe8\xde\x29\xd1\x4c\x47\x8a\xad\xf6\x8b\x66\xe1\xe6\x8f\xde\xb7\x5c\x02\x2d\x62\x36\xd5\x1b\x44\x67\xc3\x58\xd5\xfa\xcf\xe5\xba\xd3\xaf\xb5\x7e\x21\xc9\xce\xc7\xdf\x5a\x9c\x85\xa2\x25\x0a\x99\xdb\xec\xce\x77\x41\x4d\x14\x79\xdc\x8d\x33\xb6\x5e\xa9\x49\x36\x35\x1a\x4b\x2c\xf4\xef\x4a\xf7\x59\xf6\x2d\x9d\x4e\x50\xcd\x41\xbe\xba\x3e\x97\xd5\x3c\x56\x43\x8e\xe5\x4c\xbe\x1f\x44\xa8\xac\x3e\xb7\xcb\xb4\x5d\xac\x4c\xb8\xd7\xf9\x99\x5a\x15\x0c\x5d\x10\xfc\xcc\x26\x6e\x5b\x7b\xde\xd9\x7f\x72\xf6\xfb\x6c\x8a\x51\xfd\xfd\xe1\x6c\x0d\x73\xfc\x83\x3e\x8a\x35\x76\xd5\x9d\x17\xfe\xd9\x47\x3d\x06\xdb\x43\x54\x0d\xb8\xea\x85\x10\xe3\x11\x12\x77\xb8\x5c\xeb\x4d\x32\x1b\x49\x6e\x0e\x69\x57\xba\xaa\x32\xf9\xbd\xc0\x23\x8b\xb9\x6a\x97\x92\x2a\xd2\x31\x50\xec\x4f\xca\x28\xbe\x99\x56\x76\xdc\x26\xdd\x8e\xd9\x8b\x2d\x10\x31\x8e\x7c\x41\x8d\xeb\x9f\x49\x76\x57\xb7\x57\x99\xa9\x35\xb5\x68\x3c\x03\x6c\x41\xec\xf0\xfc\xca\xd2\x0f\x10\xbd\xab\x34\x1b\xfd\x50\x45\x94\xe2\x4c\x0d\x53\x3c\xe5\x4f\x28\x76\x37\x87\xfb\x33\xfe\x83\xbb\xe0\xf7\xb4\x7d\x2a\xd7\x33\x95\xed\xac\x40\x49\x7c\x0f\x69\xa4\x50\x02\x2f\x17\xf3\xcc\xbc\x2a\x82\xd3\x05\xe7\xa1\x8e\xa1\xa2\xaf\x70\x2f\x05\x52\x04\x6d\x30\xf5\x1d\xf2\x3c\x29\x19\xc7\xfb\xdd\xac\x07\xdc\xb1\x03\xc1\x82\xe2\xf6\x51\x15\x2b\xb2\x4f\x2b\x52\xdf\xa9\x70\xf2\xba\x8b\xd1\x81\xba\xa1\xee\x7d\x74\x16\x1f\xea\x3b\x93\x20\xb9\x33\xe1\x5d\x5d\x03\x34\x1f\x6d\x8b\x57\xd9\x8b\xc4\x54\x35\x31\xde\x94\x5f\xba\xb4\x5e\x38\xc4\x1a\x9f\xea\x59\x15\x13\x3f\x5f\xe6\xc3\x44\xb4\x54\x3f\x42\x8f\x1b\x45\x9b\x95\x29\x76\x4f\x72\x7e\x78\x06\xd2\xd0\x5a\xbf\xbb\x9f\xfc\xa4\xe9\x60\x17\x35\x6d\xae\xb3\x58\x50\x82\x73\x66\x91\x3b\x9a\xc9\x3c\xe6\x07\x59\x20\x3b\x81\x57\x95\x71\xd5\x2b\x3e\xba\xcd\xb7\x1f\x50\x54\x46\x1f\xcd\xef\x66\x12\x93\x93\x97\x59\x76\xea\x36\x07\xe1\x8d\x5a\x22\x7a\xad\x70\xbc\xa2\x88\x27\xdc\x39\x9d\xe1\x1f\x39\x42\xe7\x30\xce\x9a\x8d\xaf\xb5\xde\xdf\x83\x28\xf8\x61\x2a\xeb\xa3\xd0\x72\xef\x5d\x4a\xe3\x14\x18\xeb\xef\xa4\x94\x6d\xeb\x7f\xbd\x96\xb3\x35\x6a\x59\xfb\x6a\xf1\xdb\x5f\x88\xf6\x53\x69\xe9\x8b\x5b\x84\x97\x3f\xa2\xad\x81\x2a\x36\xc9\x3d\x56\x56\x42\x0b\xf9\xe9\xca\x98\x13\x42\x33\x99\x0d\xd1\x90\x06\xc9\x45\x99\x82\x1e\x58\x54\x6e\x5a\xd8\x2d\x31\xc9\x89\x63\x86\xde\x70\xf0\x0a\x1d\xbb\x99\xc6\x62\x3a\x94\xed\x40\xf5\x1b\x4e\x1d\xd4\x3d\xc3\x37\xae\xad\x00\x32\xeb\x78\x8e\x4a\x88\x7a\x83\xe9\x85\xb7\x19\x3c\x0f\x90\xee\x17\xcf\xcc\xf0\xdc\xd3\x86\xba\x7e\xa2\x6c\x27\x7f\xbf\x6c\x70\xb5\x03\x69\xe4\xf3\xae\x1d\x75\x29\xaa\xa8\x25\xf3\x79\xa1\xb8\x1d\xcf\xe9\x25\xc6\x79\xcb\xdc\x9f\xfd\xa6\xcb\xed\x60\x73\xc2\x70\xe7\x1f\x97\x17\x5c\x50\x9a\x76\x37\x82\x1f\xc9\x1f\x13\xc3\x7e\x20\x56\x9b\xd2\xb7\xb4\x35\xbf\x59\x9e\xb3\x98\x9e\xa3\x9c\x3f\xc0\x15\x2f\x39\x84\xa9\x10\x1d\x28\xb4\x65\x51\xb0\xb7\x6d\xbc\x47\x76\x99\xa7\x2a\xef\xb4\xe2\xd8\xe4\x87\x8e\xf0\x49\x5e\x7b\x0f\x41\x78\xcc\xc9\x4a\x7d\xe4\xd4\xb8\x48\xe3\x54\x89\xfe\x54\x5f\x6d\xf0\x31\xc0\x92\xa0\xc3\x75\x6d\x12\x24\x6a\x0f\xbb\x61\x45\xf2\xfa\xfa\x61\x69\x60\xcd\x77\x19\x63\x46\xfb\xe4\x38\x8f\x9d\x7a\xf4\xe0\x14\x93\x7f\xe1\xaa\xe7\x1b\x51\x97\x32\x99\xce\xcf\xc7\x12\x41\x4b\xe3\xdc\xda\x7d\x0c\x69\x34\x03\xe5\x43\x2c\x8e\x85\x21\x36\x11\xd3\x2d\xea\x04\xc3\x09\x46\x9c\x5d\xc2\xa8\xce\x41\x4e\x88\x67\x58\x3e\x6a\xc0\x52\x7d\x84\xf1\xbd\xe7\xc4\xe2\xa6\xdd\x0d\xa5\xb7\xf6\xa2\x03\x0b\xc8\x1c\x9f\xa7\x75\xe5\xad\x87\xb5\x79\x81\x9f\xd8\xa7\xb9\x18\xb9\x69\x0a\x0a\x24\x4a\x1e\x1c\x96\x61\x49\x81\xb1\xaa\x6d\x56\x09\x58\x79\xc4\xed\x74\x55\xd4\x63\x13\x3a\x42\xcb\xbd\x58\xbe\xb2\xd2\x36\x49\x2e\xb1\xd2\xa1\xb9\xbf\x62\xbf\x0f\x7b\x3a\x4f\x52\x87\x44\x76\xa8\x06\x08\xf6\x26\x34\xbd\x6e\x10\xdd\x0e\xad\xc3\xf7\xef\x68\xd3\x5f\x99\x58\x4e\x5e\xae\xaf\x7c\xc6\xe0\xd3\x4c\x7a\xef\x2d\x9b\x17\x5e\xcd\x69\x51\xec\x30\xdf\x79\x52\x7f\xe4\xfd\xc7\x85\xd9\xb9\x34\x06\xa9\xa5\x99\x82\x67\xa6\x36\x2e\x5a\xf3\x41\x49\x05\x0f\xe9\xbe\x41\xf9\x02\xf6\x66\x26\x84\xbe\xfd\xd0\x18\xe6\x8d\xc2\xd6\x48\x0c\x30\x0f\xdc\x88\x6c\x53\x7a\x28\x94\x20\x8b\xf3\x03\x0f\x8e\x58\x39\x7c\xba\xe1\xa7\x71\xd8\x67\x85\xdc\xc7\x92\x9b\xce\xcc\xc1\x2f\x70\x7f\x7a\x78\x66\x6e\x54\x06\x86\xf7\xb7\x53\x7f\xef\xe1\x4c\x00\x00\x48\x01\x36\xc0\xdd\xc7\x1b\xe6\xe3\xfd\x27\x9b\x0e\x95\x04\x05\xca\x1e\x36\x72\xfc\xfd\xd6\x6e\xf6\xbb\x08\xfa\x23\x81\xf4\x34\x14\x4d\x19\x1e\x0f\x43\x3e\xf1\xb7\x93\x14\xa5\xf9\x9d\xb7\xbe\xf6\x61\xd0\x3b\x74\x04\xa6\x94\x35\xe3\xc3\xf8\x40\x5a\xa1\xb0\x74\xe7\x68\xc2\x68\x7c\xaa\xb4\x5b\x61\xe0\x64\xa4\xae\x0e\x6d\x15\x32\x1c\x15\x8a\xa4\x12\x6f\x67\xec\x6f\x12\xf2\x2a\xf7\x5e\x00\xd5\x4d\xf6\x31\x38\x60\xda\x67\xad\x77\xfb\x02\xf9\xaa\x68\x8d\xbe\x8b\xac\xb5\x7c\x17\xd2\x30\xd3\x58\x70\xbf\xb3\x18\x08\xfc\x8c\x25\x70\x24\x96\xd6\xfb\x3f\x6f\xac\x77\x1f\x07\x17\x84\xf7\xff\xd1\xfc\x3a\xe4\x93\x03\x6c\xff\x0d\x0e\x28\x0c\xfd\x79\xfd\x5f\xf6\x38\xff\x56\xfe\x75\x9c\x20\xfc\x87\xf2\x3e\x0e\xf0\x87\x2b\x83\x7f\x6b\xfe\xda\xa7\x88\xfe\xa1\xb9\x44\x00\xfc\xe9\x58\xf2\x6f\xd1\x5f\x71\xfd\x4f\xd1\x39\x32\xe0\x4f\x1b\xde\xbf\x45\x7f\x3d\x3f\xff\x8c\x9e\x87\x02\xf8\x43\xee\xff\x5b\xf3\xd7\x3a\x92\xfe\x43\x73\x97\x1a\xf8\x1f\xce\xa1\xde\x7d\x02\xc2\x9f\xcf\x11\x02\x84\x00\x3e\x2e\x00\x34\xd3\xfc\xbc\xfb\xbf\x00\x00\x00\xff\xff\x74\xa0\x48\x25\xd2\x13\x00\x00")

func terraformModulesFuncsZipBytes() ([]byte, error) {
	return bindataRead(
		_terraformModulesFuncsZip,
		"terraform/modules/funcs.zip",
	)
}

func terraformModulesFuncsZip() (*asset, error) {
	bytes, err := terraformModulesFuncsZipBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "terraform/modules/funcs.zip", size: 5074, mode: os.FileMode(420), modTime: time.Unix(1625820107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github/mantil-workflow.yml":  githubMantilWorkflowYml,
	"terraform/modules/funcs.zip": terraformModulesFuncsZip,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"github": &bintree{nil, map[string]*bintree{
		"mantil-workflow.yml": &bintree{githubMantilWorkflowYml, map[string]*bintree{}},
	}},
	"terraform": &bintree{nil, map[string]*bintree{
		"modules": &bintree{nil, map[string]*bintree{
			"funcs.zip": &bintree{terraformModulesFuncsZip, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
